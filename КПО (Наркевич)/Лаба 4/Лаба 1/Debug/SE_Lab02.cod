; Listing generated by Microsoft (R) Optimizing Compiler Version 19.31.31105.0 

	TITLE	D:\_УЧЁБА_\Лабораторные работы\КПО (Наркевич)\Лаба 4\Лаба 1\Debug\SE_Lab02.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?prog_day_number@@3HA				; prog_day_number
msvcjmc	SEGMENT
__F32AA0BD_concurrencysal@h DB 01H
__5A3A63C4_sal@h DB 01H
__6BEC7B3D_vadefs@h DB 01H
__1BC54112_vcruntime@h DB 01H
__FF18040F_xkeycheck@h DB 01H
__3779B844_yvals_core@h DB 01H
__AD973B64_limits@h DB 01H
__62B17962_climits DB 01H
__6569C2CA_corecrt@h DB 01H
__EDB62062_vcruntime_new@h DB 01H
__5858FF13_vcruntime_new_debug@h DB 01H
__49916C16_crtdbg@h DB 01H
__41ABBF80_crtdefs@h DB 01H
__F1399E15_use_ansi@h DB 01H
__501EED2F_yvals@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__91D68F2D_math@h DB 01H
__6C20D4D3_corecrt_malloc@h DB 01H
__C9393812_stddef@h DB 01H
__D493B9BD_corecrt_search@h DB 01H
__1473E23E_corecrt_wstdlib@h DB 01H
__B49664B7_stdlib@h DB 01H
__E65E5B90_cstdlib DB 01H
__0A37AC5C_xtr1common DB 01H
__D986D001_intrin0@inl@h DB 01H
__5886068B_intrin0@h DB 01H
__38806D73_cmath DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__A913C05D_cstdio DB 01H
__CDDAF8CA_errno@h DB 01H
__4041E9ED_vcruntime_string@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__AACCF370_cstring DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__5DB64B66_corecrt_wctype@h DB 01H
__CB8D9B53_corecrt_wdirect@h DB 01H
__A9063C41_corecrt_share@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__61BDDCD5_corecrt_wprocess@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__64F617E8_types@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__3398160E_cwchar DB 01H
__4395813D_cstddef DB 01H
__E9ECD68E_initializer_list DB 01H
__264C4909_xstddef DB 01H
__70589338_iosfwd DB 01H
__13E1155B_stdint@h DB 01H
__5B00BAED_cstdint DB 01H
__B1B1C2C4_type_traits DB 01H
__D153DE1B_utility DB 01H
__7F396DA6_xutility DB 01H
__6E95DAE6_iterator DB 01H
__5B81F060_share@h DB 01H
__4926392B___msvc_system_error_abi@hpp DB 01H
__3432B4A6_cerrno DB 01H
__20BB4341_malloc@h DB 01H
__3C5D8049_corecrt_terminate@h DB 01H
__18EF2578_eh@h DB 01H
__50B6FA41_vcruntime_exception@h DB 01H
__89F4D116_exception DB 01H
__158E8E48_float@h DB 01H
__DA570BDA_cfloat DB 01H
__93CAE39E_isa_availability@h DB 01H
__BCB146BE_limits DB 01H
__F32E7743_new DB 01H
__83F85DC0_xatomic@h DB 01H
__BBC6BDD8_xmemory DB 01H
__CF153B44_xstring DB 01H
__00BAEB4B_stdexcept DB 01H
__74E16614_xcall_once@h DB 01H
__F88BF820_xerrc@h DB 01H
__A0B61CF9_time@h DB 01H
__FE33F17B_ctime DB 01H
__C9FD8EE7_xtimec@h DB 01H
__9077A9A6_xthreads@h DB 01H
__D7841A7C_atomic DB 01H
__CBBC7434_system_error DB 01H
__A784D2C3_vcruntime_typeinfo@h DB 01H
__0FE69EBF_typeinfo DB 01H
__001F4A30_memory DB 01H
__2C5A1D3F_xfacet DB 01H
__61AD4BC5___msvc_xlocinfo_types@hpp DB 01H
__B2D2BA86_ctype@h DB 01H
__A6D827FA_cctype DB 01H
__A3D09DBA_locale@h DB 01H
__75F28741_clocale DB 01H
__106F7D77_xlocinfo DB 01H
__102B4F75_xlocale DB 01H
__298A0A64_xiosbase DB 01H
__021A53F7_streambuf DB 01H
__8EAC2962_xlocnum DB 01H
__0BE34D55_ios DB 01H
__033B95B1_ostream DB 01H
__60EBA08B_istream DB 01H
__1D4017B9_iostream DB 01H
__74CCCCAC_string DB 01H
__A3F7A43C_SE_Lab02@cpp DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
?prog_day_number@@3HA DD 0100H				; prog_day_number
_DATA	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IAE@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z	; std::_Char_traits<char,int>::copy
PUBLIC	?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z	; std::_Char_traits<char,int>::move
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??0bad_cast@std@@QAE@XZ				; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	?_Throw_bad_cast@std@@YAXXZ			; std::_Throw_bad_cast
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	?prog_day_date@@YAXPAH@Z			; prog_day_date
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; string_month
PUBLIC	?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z ; inc_input_check
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?def_vis_year@@YA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; def_vis_year
PUBLIC	?num_in_year@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z ; num_in_year
PUBLIC	_main
PUBLIC	??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>
PUBLIC	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$max@I@std@@YAABIABI0@Z			; std::max<unsigned int>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Get_size_of_n@$00@std@@YAII@Z		; std::_Get_size_of_n<1>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
PUBLIC	?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEXI@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::__autoclassinit2
PUBLIC	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
PUBLIC	??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z	; std::_Voidify_iter<char * *>
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$exchange@PAV_Facet_base@std@@$$T@std@@YAPAV_Facet_base@0@AAPAV10@$$QA$$T@Z ; std::exchange<std::_Facet_base *,std::nullptr_t>
PUBLIC	??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ; std::forward<std::_Facet_base * &>
PUBLIC	__JustMyCode_Default
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@DLMJMPBP@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@MKDMFCMA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	?str_month@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; str_month
PUBLIC	??_C@_0BG@FCOBLJC@programmer?5day?5date?3?5@	; `string'
PUBLIC	??_C@_07CGJPFGJA@January@			; `string'
PUBLIC	??_C@_08GNJGEPFN@February@			; `string'
PUBLIC	??_C@_05HPCKOFNC@March@				; `string'
PUBLIC	??_C@_05DMJDNLEJ@April@				; `string'
PUBLIC	??_C@_03CNMDKL@May@				; `string'
PUBLIC	??_C@_04CNLMGBGM@June@				; `string'
PUBLIC	??_C@_04MIEPOIFP@July@				; `string'
PUBLIC	??_C@_06LBBHFDDG@August@			; `string'
PUBLIC	??_C@_09BHHEALKD@September@			; `string'
PUBLIC	??_C@_07JJNFCEND@October@			; `string'
PUBLIC	??_C@_08HCHEGEOA@November@			; `string'
PUBLIC	??_C@_08EDHMEBNP@December@			; `string'
PUBLIC	??_C@_0P@JPMAMPOL@Invalid?5length@		; `string'
PUBLIC	??_C@_0BC@GKNOMECO@Enter?5only?5digits@		; `string'
PUBLIC	??_C@_0P@JIHHEMHJ@Invalid?5month?6@		; `string'
PUBLIC	??_C@_0N@GAADDEII@Invalid?5day?6@		; `string'
PUBLIC	??_C@_03OJJHGHEE@Rus@				; `string'
PUBLIC	??_C@_0BO@MHAJIBFG@Enter?5your?5birthday?5DDMMYYYY?5@ ; `string'
PUBLIC	??_C@_0P@DMAKLLDH@Enter?5string?3?5@		; `string'
PUBLIC	??_C@_0CA@JKPKAFKJ@?D?m?e?i?5?d?n?5?l?n?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0P@KPEAGGJF@?C?n?d?5?b?h?q?n?j?n?q?m?$PL?i@ ; `string'
PUBLIC	??_C@_0BB@BFBFCOHA@?C?n?d?5?m?e?b?h?q?n?j?n?q?m?$PL?i@ ; `string'
PUBLIC	??_C@_0BD@LIFACDMA@?M?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?3?5@ ; `string'
PUBLIC	??_C@_05PDJBBECF@pause@				; `string'
PUBLIC	??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GC@MCAEMDPG@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@CELAKLBB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	_abs:PROC
EXTRN	__imp__exit:PROC
EXTRN	__imp__atoi:PROC
EXTRN	__imp__system:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_strlen:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__imp__setlocale:PROC
EXTRN	__imp_??Bid@locale@std@@QAEIXZ:PROC
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	__imp_?is@?$ctype@D@std@@QBE_NFD@Z:PROC
EXTRN	__imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ:PROC
EXTRN	__imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp_?id@?$ctype@D@std@@2V0locale@2@A:DWORD
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?str_month@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 01cH DUP (?) ; str_month
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
CRT$XCU	SEGMENT
?str_month$initializer$@@3P6AXXZA DD FLAT:??__Estr_month@@YAXXZ ; str_month$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@CELAKLBB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@CELAKLBB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '1', 00H, '.', 00H, '3', 00H, '1', 00H, '1'
	DB	00H, '0', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@MCAEMDPG@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@MCAEMDPG@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'31.31103\include\xstring', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@ DB 'string subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PDJBBECF@pause@
CONST	SEGMENT
??_C@_05PDJBBECF@pause@ DB 'pause', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LIFACDMA@?M?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?3?5@
CONST	SEGMENT
??_C@_0BD@LIFACDMA@?M?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?3?5@ DB 0cdH, 0eeH, 0ecH
	DB	0e5H, 0f0H, ' ', 0e4H, 0edH, 0ffH, ' ', 0e2H, ' ', 0e3H, 0eeH, 0e4H
	DB	0f3H, ': ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BFBFCOHA@?C?n?d?5?m?e?b?h?q?n?j?n?q?m?$PL?i@
CONST	SEGMENT
??_C@_0BB@BFBFCOHA@?C?n?d?5?m?e?b?h?q?n?j?n?q?m?$PL?i@ DB 0c3H, 0eeH, 0e4H
	DB	' ', 0edH, 0e5H, 0e2H, 0e8H, 0f1H, 0eeH, 0eaH, 0eeH, 0f1H, 0edH
	DB	0fbH, 0e9H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KPEAGGJF@?C?n?d?5?b?h?q?n?j?n?q?m?$PL?i@
CONST	SEGMENT
??_C@_0P@KPEAGGJF@?C?n?d?5?b?h?q?n?j?n?q?m?$PL?i@ DB 0c3H, 0eeH, 0e4H, ' '
	DB	0e2H, 0e8H, 0f1H, 0eeH, 0eaH, 0eeH, 0f1H, 0edH, 0fbH, 0e9H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JKPKAFKJ@?D?m?e?i?5?d?n?5?l?n?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0CA@JKPKAFKJ@?D?m?e?i?5?d?n?5?l?n?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5?$CFd?6@ DB 0c4H
	DB	0edH, 0e5H, 0e9H, ' ', 0e4H, 0eeH, ' ', 0ecH, 0eeH, 0e5H, 0e3H
	DB	0eeH, ' ', 0e4H, 0edH, 0ffH, ' ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H
	DB	0edH, 0e8H, 0ffH, ': %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DMAKLLDH@Enter?5string?3?5@
CONST	SEGMENT
??_C@_0P@DMAKLLDH@Enter?5string?3?5@ DB 'Enter string: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MHAJIBFG@Enter?5your?5birthday?5DDMMYYYY?5@
CONST	SEGMENT
??_C@_0BO@MHAJIBFG@Enter?5your?5birthday?5DDMMYYYY?5@ DB 'Enter your birt'
	DB	'hday DDMMYYYY ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OJJHGHEE@Rus@
CONST	SEGMENT
??_C@_03OJJHGHEE@Rus@ DB 'Rus', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GAADDEII@Invalid?5day?6@
CONST	SEGMENT
??_C@_0N@GAADDEII@Invalid?5day?6@ DB 'Invalid day', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JIHHEMHJ@Invalid?5month?6@
CONST	SEGMENT
??_C@_0P@JIHHEMHJ@Invalid?5month?6@ DB 'Invalid month', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GKNOMECO@Enter?5only?5digits@
CONST	SEGMENT
??_C@_0BC@GKNOMECO@Enter?5only?5digits@ DB 'Enter only digits', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JPMAMPOL@Invalid?5length@
CONST	SEGMENT
??_C@_0P@JPMAMPOL@Invalid?5length@ DB 'Invalid length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EDHMEBNP@December@
CONST	SEGMENT
??_C@_08EDHMEBNP@December@ DB 'December', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HCHEGEOA@November@
CONST	SEGMENT
??_C@_08HCHEGEOA@November@ DB 'November', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JJNFCEND@October@
CONST	SEGMENT
??_C@_07JJNFCEND@October@ DB 'October', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09BHHEALKD@September@
CONST	SEGMENT
??_C@_09BHHEALKD@September@ DB 'September', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBBHFDDG@August@
CONST	SEGMENT
??_C@_06LBBHFDDG@August@ DB 'August', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIEPOIFP@July@
CONST	SEGMENT
??_C@_04MIEPOIFP@July@ DB 'July', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CNLMGBGM@June@
CONST	SEGMENT
??_C@_04CNLMGBGM@June@ DB 'June', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CNMDKL@May@
CONST	SEGMENT
??_C@_03CNMDKL@May@ DB 'May', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05DMJDNLEJ@April@
CONST	SEGMENT
??_C@_05DMJDNLEJ@April@ DB 'April', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HPCKOFNC@March@
CONST	SEGMENT
??_C@_05HPCKOFNC@March@ DB 'March', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GNJGEPFN@February@
CONST	SEGMENT
??_C@_08GNJGEPFN@February@ DB 'February', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGJPFGJA@January@
CONST	SEGMENT
??_C@_07CGJPFGJA@January@ DB 'January', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FCOBLJC@programmer?5day?5date?3?5@
CONST	SEGMENT
??_C@_0BG@FCOBLJC@programmer?5day?5date?3?5@ DB 'programmer day date: ', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@MKDMFCMA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@MKDMFCMA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '1', 00H, '.', 00H, '3', 00H, '1', 00H, '1'
	DB	00H, '0', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@DLMJMPBP@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@DLMJMPBP@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'31.31103\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA DD 091H ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0
__ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	040fH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$0
__tryblocktable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$3
__unwindtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	010cH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	015dH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	021H
	DB	02eH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	038aH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0
__tryblocktable$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$4
__unwindtable$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01eH
	DB	02bH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	033H
	DW	0420H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$_main DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_main$0
	DD	00H
	DD	FLAT:__unwindfunclet$_main$1
__ehfuncinfo$_main DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_main
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	022H
	DB	0f9H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	022H
	DW	0131H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	021H
	DB	02eH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	030H
	DW	024dH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z$1
__ehfuncinfo$?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0b6H
	DB	0c3H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	033H
	DW	01a4H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$13
	DD	00H
	DD	FLAT:__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$3
	DD	04H
	DD	FLAT:__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$4
	DD	05H
	DD	FLAT:__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$5
	DD	06H
	DD	FLAT:__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$6
	DD	07H
	DD	FLAT:__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$7
	DD	08H
	DD	FLAT:__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$8
	DD	09H
	DD	FLAT:__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$9
	DD	0aH
	DD	FLAT:__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$10
	DD	00H
	DD	FLAT:__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$12
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	0432H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	0477H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	028H
	DB	035H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	030H
	DW	017dH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	022H
	DB	090H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	024H
	DB	0adH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	024H
	DB	090H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	027H
	DW	0156H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01eH
	DB	02bH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	032H
	DB	0dfH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$1
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01eH
	DB	02bH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	032H
	DB	0f0H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	024H
	DB	076H
voltbl	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\type_traits
;	COMDAT ??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z PROC ; std::forward<std::_Facet_base * &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B1C2C4_type_traits
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1342 :     return static_cast<_Ty&&>(_Arg);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1343 : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ENDP ; std::forward<std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00021	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00024	c1 e0 03	 shl	 eax, 3
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00031	83 c4 08	 add	 esp, 8

; 669  :         }
; 670  :     }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
_<_Val2_0>$ = 12					; size = 4
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>, COMDAT
; _this$ = ecx

; 1366 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 0c	 mov	 eax, DWORD PTR _<_Val2_0>$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ; std::forward<std::_Facet_base * &>
  00033	83 c4 04	 add	 esp, 4
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 10		 mov	 edx, DWORD PTR [eax]
  0003b	89 11		 mov	 DWORD PTR [ecx], edx
  0003d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\utility
;	COMDAT ??$exchange@PAV_Facet_base@std@@$$T@std@@YAPAV_Facet_base@0@AAPAV10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -8						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAV_Facet_base@std@@$$T@std@@YAPAV_Facet_base@0@AAPAV10@$$QA$$T@Z PROC ; std::exchange<std::_Facet_base *,std::nullptr_t>, COMDAT

; 605  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0000f	b9 03 00 00 00	 mov	 ecx, 3
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __D153DE1B_utility
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 606  :     // assign _New_val to _Val, return previous _Val
; 607  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00025	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	89 4d f8	 mov	 DWORD PTR __Old_val$[ebp], ecx

; 608  :     _Val         = static_cast<_Other&&>(_New_val);

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR __New_val$[ebp]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	89 10		 mov	 DWORD PTR [eax], edx

; 609  :     return _Old_val;

  00037	8b 45 f8	 mov	 eax, DWORD PTR __Old_val$[ebp]

; 610  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
??$exchange@PAV_Facet_base@std@@$$T@std@@YAPAV_Facet_base@0@AAPAV10@$$QA$$T@Z ENDP ; std::exchange<std::_Facet_base *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -32						; size = 4
__Ptr_container$ = -20					; size = 4
__Block_size$ = -8					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0000f	b9 09 00 00 00	 mov	 ecx, 9
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00025	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00028	83 c0 27	 add	 eax, 39			; 00000027H
  0002b	89 45 f8	 mov	 DWORD PTR __Block_size$[ebp], eax

; 130  :     if (_Block_size <= _Bytes) {

  0002e	8b 45 f8	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00031	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00034	77 05		 ja	 SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

  00036	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0003b	8b 45 f8	 mov	 eax, DWORD PTR __Block_size$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  00044	83 c4 04	 add	 esp, 4
  00047	89 45 ec	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004a	83 7d ec 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  0004e	74 02		 je	 SHORT $LN7@Allocate_m
  00050	eb 5c		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00052	8b f4		 mov	 esi, esp
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0005e	6a 00		 push	 0
  00060	68 87 00 00 00	 push	 135			; 00000087H
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@DLMJMPBP@C?3?2Program?5Files?2Microsoft?5Visu@
  0006a	6a 02		 push	 2
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00072	83 c4 18	 add	 esp, 24			; 00000018H
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	83 f8 01	 cmp	 eax, 1
  0007f	75 01		 jne	 SHORT $LN12@Allocate_m
  00081	cc		 int	 3
$LN12@Allocate_m:
  00082	8b f4		 mov	 esi, esp
  00084	6a 00		 push	 0
  00086	68 87 00 00 00	 push	 135			; 00000087H
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_1ME@MKDMFCMA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000a0	83 c4 14	 add	 esp, 20			; 00000014H
  000a3	3b f4		 cmp	 esi, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	33 c0		 xor	 eax, eax
  000ac	75 a4		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  000ae	33 c0		 xor	 eax, eax
  000b0	75 98		 jne	 SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000b2	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  000b5	83 c0 27	 add	 eax, 39			; 00000027H
  000b8	83 e0 e0	 and	 eax, -32		; ffffffe0H
  000bb	89 45 e0	 mov	 DWORD PTR __Ptr$[ebp], eax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000be	b8 04 00 00 00	 mov	 eax, 4
  000c3	6b c8 ff	 imul	 ecx, eax, -1
  000c6	8b 55 e0	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000c9	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  000cc	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

  000cf	b8 04 00 00 00	 mov	 eax, 4
  000d4	6b c8 fe	 imul	 ecx, eax, -2
  000d7	8b 55 e0	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000da	c7 04 0a fa fa
	fa fa		 mov	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

  000e1	8b 45 e0	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 143  : }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B1C2C4_type_traits
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1342 :     return static_cast<_Ty&&>(_Arg);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1343 : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z PROC		; std::_Voidify_iter<char * *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __7F396DA6_xutility
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00021	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z ENDP		; std::_Voidify_iter<char * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __264C4909_xstddef
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 253  :     return __builtin_addressof(_Val);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 254  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B1C2C4_type_traits
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1342 :     return static_cast<_Ty&&>(_Arg);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1343 : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 968  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0001d	33 c9		 xor	 ecx, ecx
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  0003c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 969  :     // deallocate a plain pointer using an allocator
; 970  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 971  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 972  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

  00041	6a 01		 push	 1
  00043	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00046	50		 push	 eax
  00047	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH

; 973  :     } else {
; 974  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 975  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 976  :     }
; 977  : }

  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
  00072	cc		 int	 3
  00073	cc		 int	 3
  00074	cc		 int	 3
  00075	cc		 int	 3
  00076	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\istream
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 103  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __60EBA08B_istream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 104  :             return _Ok;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 105  :         }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\istream
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$ = 12						; size = 1
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 101  :             : _Sentry_base(_Istr), _Ok(_Sentry_base::_Myistr._Ipfx(_Noskip)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  0001e	b9 03 00 00 00	 mov	 ecx, 3
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __60EBA08B_istream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00049	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005c	8b f4		 mov	 esi, esp
  0005e	0f b6 45 0c	 movzx	 eax, BYTE PTR __Noskip$[ebp]
  00062	50		 push	 eax
  00063	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  0006e	3b f4		 cmp	 esi, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00078	88 42 04	 mov	 BYTE PTR [edx+4], al
  0007b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00082	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00085	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00088	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008f	59		 pop	 ecx
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00099	3b ec		 cmp	 ebp, esp
  0009b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\istream
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 86   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __60EBA08B_istream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :             const auto _Rdbuf = _Myistr.rdbuf();

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00054	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00062	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00065	8b f4		 mov	 esi, esp
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	89 45 e0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 88   :             if (_Rdbuf) {

  00077	83 7d e0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0007b	74 16		 je	 SHORT $LN3@Sentry_bas

; 89   :                 _Rdbuf->_Unlock();

  0007d	8b 45 e0	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00080	8b 10		 mov	 edx, DWORD PTR [eax]
  00082	8b f4		 mov	 esi, esp
  00084	8b 4d e0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00087	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008a	ff d0		 call	 eax
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 90   :             }
; 91   :         }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
  000b6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\istream
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 79   :         __CLR_OR_THIS_CALL _Sentry_base(basic_istream& _Istr) : _Myistr(_Istr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __60EBA08B_istream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 80   :             const auto _Rdbuf = _Myistr.rdbuf();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  0003d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004e	8b f4		 mov	 esi, esp
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 81   :             if (_Rdbuf) {

  00060	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00064	74 16		 je	 SHORT $LN1@Sentry_bas

; 82   :                 _Rdbuf->_Lock();

  00066	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00069	8b 10		 mov	 edx, DWORD PTR [eax]
  0006b	8b f4		 mov	 esi, esp
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00070	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00073	ff d0		 call	 eax
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 83   :             }
; 84   :         }

  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
_TEXT	SEGMENT
tv405 = -332						; size = 8
tv290 = -324						; size = 4
tv287 = -324						; size = 8
tv285 = -324						; size = 4
tv324 = -320						; size = 8
tv289 = -320						; size = 4
tv284 = -320						; size = 4
tv286 = -316						; size = 4
tv135 = -316						; size = 4
tv288 = -313						; size = 1
tv283 = -313						; size = 1
$T2 = -308						; size = 4
$T3 = -296						; size = 4
$T4 = -284						; size = 4
$T5 = -272						; size = 4
$T6 = -260						; size = 4
__Ok$ = -56						; size = 8
__Pad$ = -40						; size = 4
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Data$ = 12						; size = 4
__Size$ = 16						; size = 4
??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z PROC ; std::_Insert_string<char,std::char_traits<char>,unsigned int>, COMDAT

; 479  :     basic_ostream<_Elem, _Traits>& _Ostr, const _Elem* const _Data, const _SizeT _Size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 74 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-140]
  00021	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 480  :     // insert a character-type sequence into _Ostr as if through a basic_string copy
; 481  :     using _Ostr_t                    = basic_ostream<_Elem, _Traits>;
; 482  :     typename _Ostr_t::iostate _State = _Ostr_t::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 483  : 
; 484  :     _SizeT _Pad;
; 485  :     if (_Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size) {

  00055	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0005d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00060	8b f4		 mov	 esi, esp
  00062	8b ca		 mov	 ecx, edx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv324[ebp], eax
  00077	89 95 c4 fe ff
	ff		 mov	 DWORD PTR tv324[ebp+4], edx
  0007d	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR tv324[ebp+4], 0
  00084	7c 2c		 jl	 SHORT $LN10@Insert_str
  00086	7f 09		 jg	 SHORT $LN25@Insert_str
  00088	83 bd c0 fe ff
	ff 00		 cmp	 DWORD PTR tv324[ebp], 0
  0008f	76 21		 jbe	 SHORT $LN10@Insert_str
$LN25@Insert_str:
  00091	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00099	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0009c	8b f4		 mov	 esi, esp
  0009e	8b ca		 mov	 ecx, edx
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000a6	3b f4		 cmp	 esi, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	3b 45 10	 cmp	 eax, DWORD PTR __Size$[ebp]
  000b0	77 09		 ja	 SHORT $LN8@Insert_str
$LN10@Insert_str:

; 486  :         _Pad = 0;

  000b2	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Pad$[ebp], 0

; 487  :     } else {

  000b9	eb 22		 jmp	 SHORT $LN9@Insert_str
$LN8@Insert_str:

; 488  :         _Pad = static_cast<_SizeT>(_Ostr.width()) - _Size;

  000bb	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000be	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000c3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000c6	8b f4		 mov	 esi, esp
  000c8	8b ca		 mov	 ecx, edx
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000d0	3b f4		 cmp	 esi, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d7	2b 45 10	 sub	 eax, DWORD PTR __Size$[ebp]
  000da	89 45 d8	 mov	 DWORD PTR __Pad$[ebp], eax
$LN9@Insert_str:

; 489  :     }
; 490  : 
; 491  :     const typename _Ostr_t::sentry _Ok(_Ostr);

  000dd	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000e0	50		 push	 eax
  000e1	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e4	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000e9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 492  : 
; 493  :     if (!_Ok) {

  000f0	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000f3	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  000f8	0f b6 c0	 movzx	 eax, al
  000fb	85 c0		 test	 eax, eax
  000fd	75 0e		 jne	 SHORT $LN11@Insert_str

; 494  :         _State |= _Ostr_t::badbit;

  000ff	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00102	83 c8 04	 or	 eax, 4
  00105	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 495  :     } else { // state okay, insert characters

  00108	e9 a5 02 00 00	 jmp	 $LN12@Insert_str
$LN11@Insert_str:

; 496  :         _TRY_IO_BEGIN

  0010d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 497  :         if ((_Ostr.flags() & _Ostr_t::adjustfield) != _Ostr_t::left) {

  00111	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00114	8b 08		 mov	 ecx, DWORD PTR [eax]
  00116	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00119	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0011c	8b f4		 mov	 esi, esp
  0011e	8b ca		 mov	 ecx, edx
  00120	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00126	3b f4		 cmp	 esi, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012d	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  00133	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR tv135[ebp]
  00139	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0013e	83 f8 40	 cmp	 eax, 64			; 00000040H
  00141	0f 84 c0 00 00
	00		 je	 $LN14@Insert_str

; 498  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00147	eb 09		 jmp	 SHORT $LN4@Insert_str
$LN2@Insert_str:
  00149	8b 45 d8	 mov	 eax, DWORD PTR __Pad$[ebp]
  0014c	83 e8 01	 sub	 eax, 1
  0014f	89 45 d8	 mov	 DWORD PTR __Pad$[ebp], eax
$LN4@Insert_str:
  00152	83 7d d8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00156	0f 86 ab 00 00
	00		 jbe	 $LN14@Insert_str

; 499  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0015c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0015f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00161	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00164	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00167	8b f4		 mov	 esi, esp
  00169	8b ca		 mov	 ecx, edx
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00171	3b f4		 cmp	 esi, esp
  00173	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00178	88 85 c7 fe ff
	ff		 mov	 BYTE PTR tv283[ebp], al
  0017e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00181	8b 08		 mov	 ecx, DWORD PTR [eax]
  00183	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00186	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00189	8b f4		 mov	 esi, esp
  0018b	8b ca		 mov	 ecx, edx
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00193	3b f4		 cmp	 esi, esp
  00195	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019a	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  001a0	8b f4		 mov	 esi, esp
  001a2	0f b6 85 c7 fe
	ff ff		 movzx	 eax, BYTE PTR tv283[ebp]
  001a9	50		 push	 eax
  001aa	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp]
  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  001b6	3b f4		 cmp	 esi, esp
  001b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001bd	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  001c3	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  001c9	89 8d fc fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  001cf	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001d4	89 85 f0 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  001da	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  001e0	52		 push	 edx
  001e1	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001ed	83 c4 08	 add	 esp, 8
  001f0	0f b6 c8	 movzx	 ecx, al
  001f3	85 c9		 test	 ecx, ecx
  001f5	74 0b		 je	 SHORT $LN15@Insert_str

; 500  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  001f7	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  001fa	83 c8 04	 or	 eax, 4
  001fd	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 501  :                     break;

  00200	eb 05		 jmp	 SHORT $LN14@Insert_str
$LN15@Insert_str:

; 502  :                 }
; 503  :             }

  00202	e9 42 ff ff ff	 jmp	 $LN2@Insert_str
$LN14@Insert_str:

; 504  :         }
; 505  : 
; 506  :         if (_State == _Ostr_t::goodbit
; 507  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  00207	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  0020b	0f 85 89 00 00
	00		 jne	 $LN16@Insert_str
  00211	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00214	8b 08		 mov	 ecx, DWORD PTR [eax]
  00216	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00219	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0021c	8b f4		 mov	 esi, esp
  0021e	8b ca		 mov	 ecx, edx
  00220	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00226	3b f4		 cmp	 esi, esp
  00228	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0022d	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  00233	8b 45 10	 mov	 eax, DWORD PTR __Size$[ebp]
  00236	33 c9		 xor	 ecx, ecx
  00238	8b f4		 mov	 esi, esp
  0023a	51		 push	 ecx
  0023b	50		 push	 eax
  0023c	8b 55 0c	 mov	 edx, DWORD PTR __Data$[ebp]
  0023f	52		 push	 edx
  00240	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  0024c	3b f4		 cmp	 esi, esp
  0024e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00253	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  00259	89 95 c0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp+4], edx
  0025f	8b 45 10	 mov	 eax, DWORD PTR __Size$[ebp]
  00262	33 c9		 xor	 ecx, ecx
  00264	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv405[ebp], eax
  0026a	89 8d b8 fe ff
	ff		 mov	 DWORD PTR tv405[ebp+4], ecx
  00270	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR tv287[ebp]
  00276	3b 95 b4 fe ff
	ff		 cmp	 edx, DWORD PTR tv405[ebp]
  0027c	75 0e		 jne	 SHORT $LN26@Insert_str
  0027e	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR tv287[ebp+4]
  00284	3b 85 b8 fe ff
	ff		 cmp	 eax, DWORD PTR tv405[ebp+4]
  0028a	74 0e		 je	 SHORT $LN16@Insert_str
$LN26@Insert_str:

; 508  :             _State |= _Ostr_t::badbit;

  0028c	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0028f	83 c8 04	 or	 eax, 4
  00292	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 509  :         } else {

  00295	e9 c0 00 00 00	 jmp	 $LN17@Insert_str
$LN16@Insert_str:

; 510  :             for (; 0 < _Pad; --_Pad) { // pad on right

  0029a	eb 09		 jmp	 SHORT $LN7@Insert_str
$LN5@Insert_str:
  0029c	8b 45 d8	 mov	 eax, DWORD PTR __Pad$[ebp]
  0029f	83 e8 01	 sub	 eax, 1
  002a2	89 45 d8	 mov	 DWORD PTR __Pad$[ebp], eax
$LN7@Insert_str:
  002a5	83 7d d8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  002a9	0f 86 ab 00 00
	00		 jbe	 $LN17@Insert_str

; 511  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002af	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b4	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002b7	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002ba	8b f4		 mov	 esi, esp
  002bc	8b ca		 mov	 ecx, edx
  002be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002c4	3b f4		 cmp	 esi, esp
  002c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002cb	88 85 c7 fe ff
	ff		 mov	 BYTE PTR tv288[ebp], al
  002d1	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d6	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002d9	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002dc	8b f4		 mov	 esi, esp
  002de	8b ca		 mov	 ecx, edx
  002e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002e6	3b f4		 cmp	 esi, esp
  002e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ed	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv289[ebp], eax
  002f3	8b f4		 mov	 esi, esp
  002f5	0f b6 85 c7 fe
	ff ff		 movzx	 eax, BYTE PTR tv288[ebp]
  002fc	50		 push	 eax
  002fd	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv289[ebp]
  00303	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00309	3b f4		 cmp	 esi, esp
  0030b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00310	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  00316	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0031c	89 8d e4 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00322	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00327	89 85 d8 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0032d	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00333	52		 push	 edx
  00334	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0033a	50		 push	 eax
  0033b	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00340	83 c4 08	 add	 esp, 8
  00343	0f b6 c8	 movzx	 ecx, al
  00346	85 c9		 test	 ecx, ecx
  00348	74 0b		 je	 SHORT $LN18@Insert_str

; 512  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  0034a	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0034d	83 c8 04	 or	 eax, 4
  00350	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 513  :                     break;

  00353	eb 05		 jmp	 SHORT $LN17@Insert_str
$LN18@Insert_str:

; 514  :                 }
; 515  :             }

  00355	e9 42 ff ff ff	 jmp	 $LN5@Insert_str
$LN17@Insert_str:

; 516  :         }
; 517  : 
; 518  :         _Ostr.width(0);

  0035a	8b f4		 mov	 esi, esp
  0035c	6a 00		 push	 0
  0035e	6a 00		 push	 0
  00360	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00363	8b 08		 mov	 ecx, DWORD PTR [eax]
  00365	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00368	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0036b	8b ca		 mov	 ecx, edx
  0036d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  00373	3b f4		 cmp	 esi, esp
  00375	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0037a	eb 26		 jmp	 SHORT $LN20@Insert_str
__catch$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$0:

; 519  :         _CATCH_IO_(_Ostr_t, _Ostr)

  0037c	8b f4		 mov	 esi, esp
  0037e	6a 01		 push	 1
  00380	6a 04		 push	 4
  00382	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00385	8b 08		 mov	 ecx, DWORD PTR [eax]
  00387	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0038a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0038d	8b ca		 mov	 ecx, edx
  0038f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00395	3b f4		 cmp	 esi, esp
  00397	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0039c	b8 00 00 00 00	 mov	 eax, $LN24@Insert_str
  003a1	c3		 ret	 0
$LN20@Insert_str:
  003a2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  003a9	eb 07		 jmp	 SHORT $LN12@Insert_str
$LN24@Insert_str:
  003ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN12@Insert_str:

; 520  :     }
; 521  : 
; 522  :     _Ostr.setstate(_State);

  003b2	8b f4		 mov	 esi, esp
  003b4	6a 00		 push	 0
  003b6	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003b9	50		 push	 eax
  003ba	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003bd	8b 11		 mov	 edx, DWORD PTR [ecx]
  003bf	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003c2	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003cb	3b f4		 cmp	 esi, esp
  003cd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 523  :     return _Ostr;

  003d2	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003d5	89 85 cc fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  003e2	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  003e5	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003ea	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 524  : }

  003f0	52		 push	 edx
  003f1	8b cd		 mov	 ecx, ebp
  003f3	50		 push	 eax
  003f4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN30@Insert_str
  003fa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003ff	58		 pop	 eax
  00400	5a		 pop	 edx
  00401	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00404	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0040b	59		 pop	 ecx
  0040c	5f		 pop	 edi
  0040d	5e		 pop	 esi
  0040e	5b		 pop	 ebx
  0040f	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00412	33 cd		 xor	 ecx, ebp
  00414	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00419	81 c4 4c 01 00
	00		 add	 esp, 332		; 0000014cH
  0041f	3b ec		 cmp	 ebp, esp
  00421	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00426	8b e5		 mov	 esp, ebp
  00428	5d		 pop	 ebp
  00429	c3		 ret	 0
  0042a	66 90		 npad	 2
$LN30@Insert_str:
  0042c	01 00 00 00	 DD	 1
  00430	00 00 00 00	 DD	 $LN29@Insert_str
$LN29@Insert_str:
  00434	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00438	08 00 00 00	 DD	 8
  0043c	00 00 00 00	 DD	 $LN27@Insert_str
$LN27@Insert_str:
  00440	5f		 DB	 95			; 0000005fH
  00441	4f		 DB	 79			; 0000004fH
  00442	6b		 DB	 107			; 0000006bH
  00443	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a b0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-336]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ENDP ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory
;	COMDAT ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>, COMDAT
; _this$ = ecx

; 3176 :     explicit unique_ptr(pointer _Ptr) noexcept : _Mypair(_Zero_then_variadic_args_t{}, _Ptr) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  00010	b9 06 00 00 00	 mov	 ecx, 6
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __001F4A30_memory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  0002d	50		 push	 eax
  0002e	0f b6 8d 2f ff
	ff ff		 movzx	 ecx, BYTE PTR $T1[ebp]
  00035	51		 push	 ecx
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEXI@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00023	50		 push	 eax
  00024	6a 00		 push	 0
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 _memset
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEXI@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first, COMDAT
; _this$ = ecx

; 1373 :     constexpr _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1374 :         return *this;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 1375 :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory
;	COMDAT ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release, COMDAT
; _this$ = ecx

; 3261 :     pointer release() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  00010	b9 06 00 00 00	 mov	 ecx, 6
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __001F4A30_memory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3262 :         return _STD exchange(_Mypair._Myval2, nullptr);

  0002a	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0
  00034	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ??$exchange@PAV_Facet_base@std@@$$T@std@@YAPAV_Facet_base@0@AAPAV10@$$QA$$T@Z ; std::exchange<std::_Facet_base *,std::nullptr_t>
  00044	83 c4 08	 add	 esp, 8

; 3263 :     }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT
; _this$ = ecx

; 3231 :     ~unique_ptr() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __001F4A30_memory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3232 :         if (_Mypair._Myval2) {

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00030	74 15		 je	 SHORT $LN3@unique_ptr

; 3233 :             _Mypair._Get_first()(_Mypair._Myval2);

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	51		 push	 ecx
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
  00040	8b c8		 mov	 ecx, eax
  00042	e8 00 00 00 00	 call	 ??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
$LN3@unique_ptr:

; 3234 :         }
; 3235 :     }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory
;	COMDAT ??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z
_TEXT	SEGMENT
tv70 = -220						; size = 4
$T1 = -212						; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z PROC ; std::default_delete<std::_Facet_base>::operator(), COMDAT
; _this$ = ecx

; 3123 :     void operator()(_Ty* _Ptr) const noexcept /* strengthened */ { // delete a pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __001F4A30_memory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3124 :         static_assert(0 < sizeof(_Ty), "can't delete an incomplete type");
; 3125 :         delete _Ptr;

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002d	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00033	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR $T1[ebp], 0
  0003a	74 25		 je	 SHORT $LN3@operator
  0003c	8b f4		 mov	 esi, esp
  0003e	6a 01		 push	 1
  00040	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00046	8b 11		 mov	 edx, DWORD PTR [ecx]
  00048	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  0004e	8b 02		 mov	 eax, DWORD PTR [edx]
  00050	ff d0		 call	 eax
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  0005f	eb 0a		 jmp	 SHORT $LN2@operator
$LN3@operator:
  00061	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN2@operator:

; 3126 :     }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ENDP ; std::default_delete<std::_Facet_base>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B1C2C4_type_traits
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1342 :     return static_cast<_Ty&&>(_Arg);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1343 : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xutility
;	COMDAT ??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __7F396DA6_xutility
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00021	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __264C4909_xstddef
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 253  :     return __builtin_addressof(_Val);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 254  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Overflow_is_possible$ = -5				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0000f	b9 03 00 00 00	 mov	 ecx, 3
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00025	c6 45 fb 00	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 0

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 60   :         if (_Count > _Max_possible) {
; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00029	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 66   : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0001d	33 c9		 xor	 ecx, ecx
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  0003c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00041	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00048	72 10		 jb	 SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0004a	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0004d	50		 push	 eax
  0004e	8d 4d 08	 lea	 ecx, DWORD PTR __Ptr$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00057	83 c4 08	 add	 esp, 8
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

  0005a	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00067	83 c4 08	 add	 esp, 8

; 256  :     }
; 257  : }

  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
  00089	cc		 int	 3
  0008a	cc		 int	 3
  0008b	cc		 int	 3
  0008c	cc		 int	 3
  0008d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00021	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00028	72 0e		 jb	 SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00033	83 c4 04	 add	 esp, 4
  00036	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00038	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0003c	74 0e		 je	 SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

  0003e	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  00047	83 c4 04	 add	 esp, 4
  0004a	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0004c	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 239  : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -20					; size = 4
__Overflow_is_possible$ = -5				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  0000f	b9 06 00 00 00	 mov	 ecx, 6
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00025	c6 45 fb 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00029	c7 45 ec ff ff
	ff 1f		 mov	 DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 60   :         if (_Count > _Max_possible) {

  00030	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00037	76 05		 jbe	 SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00039	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0003e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00041	c1 e0 03	 shl	 eax, 3
$LN3@Get_size_o:

; 66   : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\utility
;	COMDAT ??$max@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
$T1 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@I@std@@YAABIABI0@Z PROC				; std::max<unsigned int>, COMDAT

; 41   :     (max) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  0000f	b9 04 00 00 00	 mov	 ecx, 4
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __D153DE1B_utility
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 42   :     // return larger of _Left and _Right
; 43   :     return _Left < _Right ? _Right : _Left;

  00025	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002b	8b 10		 mov	 edx, DWORD PTR [eax]
  0002d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002f	73 0b		 jae	 SHORT $LN3@max
  00031	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00034	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  0003a	eb 09		 jmp	 SHORT $LN4@max
$LN3@max:
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0003f	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
$LN4@max:
  00045	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  0004b	89 95 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  00051	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]

; 44   : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
??$max@I@std@@YAABIABI0@Z ENDP				; std::max<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __264C4909_xstddef
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 266  :     return _Ptr;

  00021	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 267  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xutility
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0000f	b9 03 00 00 00	 mov	 ecx, 3
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __7F396DA6_xutility
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00025	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  0002e	83 c4 04	 add	 esp, 4
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z ; std::_Voidify_iter<char * *>
  00037	83 c4 04	 add	 esp, 4
  0003a	50		 push	 eax
  0003b	6a 04		 push	 4
  0003d	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00042	83 c4 08	 add	 esp, 8
  00045	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ??$forward@ABQAD@std@@YAABQADABQAD@Z ; std::forward<char * const &>
  00054	83 c4 04	 add	 esp, 4
  00057	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005d	8b 00		 mov	 eax, DWORD PTR [eax]
  0005f	89 02		 mov	 DWORD PTR [edx], eax

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 150  :     }
; 151  : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__New_ptr$ = -60					; size = 4
__Al$ = -48						; size = 4
__New_capacity$ = -36					; size = 4
__Old_capacity$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 4528 :     _CONSTEXPR20 basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00010	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00027	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  0002f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4529 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4530 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4531 :         if (_New_size > max_size()) {

  00034	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0003c	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  0003f	76 05		 jbe	 SHORT $LN2@Reallocate

; 4532 :             _Xlen_string(); // result too long

  00041	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4533 :         }
; 4534 : 
; 4535 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00046	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0004c	89 4d e8	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 4536 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  0004f	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
  00052	50		 push	 eax
  00053	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0005b	89 45 dc	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4537 :         auto& _Al                     = _Getal();

  0005e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00066	89 45 d0	 mov	 DWORD PTR __Al$[ebp], eax

; 4538 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00069	33 c0		 xor	 eax, eax
  0006b	8b 4d dc	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0006e	83 c1 01	 add	 ecx, 1
  00071	0f 92 c0	 setb	 al
  00074	f7 d8		 neg	 eax
  00076	0b c1		 or	 eax, ecx
  00078	50		 push	 eax
  00079	8b 4d d0	 mov	 ecx, DWORD PTR __Al$[ebp]
  0007c	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00081	89 45 c4	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4539 : 
; 4540 : #if _HAS_CXX20
; 4541 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4542 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4543 :         }
; 4544 : #endif // _HAS_CXX20
; 4545 :         _Mypair._Myval2._Orphan_all();

  00084	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4546 :         _Mypair._Myval2._Mysize = _New_size;

  0008c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00092	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4547 :         _Mypair._Myval2._Myres  = _New_capacity;

  00095	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00098	8b 4d dc	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0009b	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 4548 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  0009e	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000a1	50		 push	 eax
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  000a5	51		 push	 ecx
  000a6	8b 55 c4	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  000a9	52		 push	 edx
  000aa	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000af	83 c4 04	 add	 esp, 4
  000b2	50		 push	 eax
  000b3	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000b6	e8 00 00 00 00	 call	 ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()

; 4549 :         if (_BUF_SIZE <= _Old_capacity) {

  000bb	83 7d e8 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000bf	72 21		 jb	 SHORT $LN3@Reallocate

; 4550 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000c1	8b 45 e8	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000c4	83 c0 01	 add	 eax, 1
  000c7	50		 push	 eax
  000c8	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ce	52		 push	 edx
  000cf	8b 4d d0	 mov	 ecx, DWORD PTR __Al$[ebp]
  000d2	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 4551 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000d7	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000da	8b 4d c4	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000dd	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4552 :         } else {

  000e0	eb 13		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4553 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000e2	8d 45 c4	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  000e5	50		 push	 eax
  000e6	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	83 c1 04	 add	 ecx, 4
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000f2	83 c4 08	 add	 esp, 8
$LN4@Reallocate:

; 4554 :         }
; 4555 : 
; 4556 :         return *this;

  000f5	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4557 :     }

  000f8	52		 push	 edx
  000f9	8b cd		 mov	 ecx, ebp
  000fb	50		 push	 eax
  000fc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  00102	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00107	58		 pop	 eax
  00108	5a		 pop	 edx
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx
  0010c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010f	33 cd		 xor	 ecx, ebp
  00111	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00116	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  0011c	3b ec		 cmp	 ebp, esp
  0011e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c2 0c 00	 ret	 12			; 0000000cH
  00129	0f 1f 00	 npad	 3
$LN8@Reallocate:
  0012c	01 00 00 00	 DD	 1
  00130	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00134	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00138	04 00 00 00	 DD	 4
  0013c	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00140	5f		 DB	 95			; 0000005fH
  00141	4e		 DB	 78			; 0000004eH
  00142	65		 DB	 101			; 00000065H
  00143	77		 DB	 119			; 00000077H
  00144	5f		 DB	 95			; 0000005fH
  00145	70		 DB	 112			; 00000070H
  00146	74		 DB	 116			; 00000074H
  00147	72		 DB	 114			; 00000072H
  00148	00		 DB	 0
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 3258 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  00010	b9 06 00 00 00	 mov	 ecx, 6
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3259 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3260 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0003e	c6 85 2f ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  00045	8d 85 2f ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  0004f	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00058	83 c4 08	 add	 esp, 8

; 3261 :             },

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z
_TEXT	SEGMENT
__Old_ptr$1 = -120					; size = 4
__Raw_new$ = -108					; size = 4
__New_ptr$ = -96					; size = 4
__Al$ = -84						; size = 4
__New_capacity$ = -72					; size = 4
__Old_capacity$ = -60					; size = 4
__New_size$ = -48					; size = 4
__Old_size$ = -36					; size = 4
__My_data$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 1
??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>, COMDAT
; _this$ = ecx

; 4560 :     _CONSTEXPR20 basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d 84	 lea	 edi, DWORD PTR [ebp-124]
  00010	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00027	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  0002f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4561 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4562 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4563 :         auto& _My_data            = _Mypair._Myval2;

  00034	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00037	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 4564 :         const size_type _Old_size = _My_data._Mysize;

  0003a	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00040	89 4d dc	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 4565 :         if (max_size() - _Old_size < _Size_increase) {

  00043	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0004b	2b 45 dc	 sub	 eax, DWORD PTR __Old_size$[ebp]
  0004e	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  00051	73 05		 jae	 SHORT $LN2@Reallocate

; 4566 :             _Xlen_string(); // result too long

  00053	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4567 :         }
; 4568 : 
; 4569 :         const size_type _New_size     = _Old_size + _Size_increase;

  00058	8b 45 dc	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0005b	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  0005e	89 45 d0	 mov	 DWORD PTR __New_size$[ebp], eax

; 4570 :         const size_type _Old_capacity = _My_data._Myres;

  00061	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00064	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00067	89 4d c4	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 4571 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  0006a	8b 45 d0	 mov	 eax, DWORD PTR __New_size$[ebp]
  0006d	50		 push	 eax
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00076	89 45 b8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4572 :         auto& _Al                     = _Getal();

  00079	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00081	89 45 ac	 mov	 DWORD PTR __Al$[ebp], eax

; 4573 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00084	33 c0		 xor	 eax, eax
  00086	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00089	83 c1 01	 add	 ecx, 1
  0008c	0f 92 c0	 setb	 al
  0008f	f7 d8		 neg	 eax
  00091	0b c1		 or	 eax, ecx
  00093	50		 push	 eax
  00094	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  00097	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0009c	89 45 a0	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4574 : 
; 4575 : #if _HAS_CXX20
; 4576 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4577 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4578 :         }
; 4579 : #endif // _HAS_CXX20
; 4580 :         _My_data._Orphan_all();

  0009f	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000a2	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4581 :         _My_data._Mysize      = _New_size;

  000a7	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000aa	8b 4d d0	 mov	 ecx, DWORD PTR __New_size$[ebp]
  000ad	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4582 :         _My_data._Myres       = _New_capacity;

  000b0	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000b3	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000b6	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 4583 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b9	8b 45 a0	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000c2	83 c4 04	 add	 esp, 4
  000c5	89 45 94	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 4584 :         if (_BUF_SIZE <= _Old_capacity) {

  000c8	83 7d c4 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000cc	72 49		 jb	 SHORT $LN3@Reallocate

; 4585 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000ce	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000d1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d4	89 4d 88	 mov	 DWORD PTR __Old_ptr$1[ebp], ecx

; 4586 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000d7	0f b6 45 10	 movzx	 eax, BYTE PTR _<_Args_0>$[ebp]
  000db	50		 push	 eax
  000dc	8b 4d dc	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  000df	51		 push	 ecx
  000e0	8b 55 88	 mov	 edx, DWORD PTR __Old_ptr$1[ebp]
  000e3	52		 push	 edx
  000e4	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000e9	83 c4 04	 add	 esp, 4
  000ec	50		 push	 eax
  000ed	8b 45 94	 mov	 eax, DWORD PTR __Raw_new$[ebp]
  000f0	50		 push	 eax
  000f1	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000f4	e8 00 00 00 00	 call	 ??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()

; 4587 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000f9	8b 45 c4	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000fc	83 c0 01	 add	 eax, 1
  000ff	50		 push	 eax
  00100	8b 4d 88	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  00103	51		 push	 ecx
  00104	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  00107	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 4588 :             _My_data._Bx._Ptr = _New_ptr;

  0010c	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0010f	8b 4d a0	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00112	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4589 :         } else {

  00115	eb 2f		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4590 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  00117	0f b6 45 10	 movzx	 eax, BYTE PTR _<_Args_0>$[ebp]
  0011b	50		 push	 eax
  0011c	8b 4d dc	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0011f	51		 push	 ecx
  00120	8b 55 e8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00123	83 c2 04	 add	 edx, 4
  00126	52		 push	 edx
  00127	8b 45 94	 mov	 eax, DWORD PTR __Raw_new$[ebp]
  0012a	50		 push	 eax
  0012b	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  0012e	e8 00 00 00 00	 call	 ??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()

; 4591 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00133	8d 45 a0	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  00136	50		 push	 eax
  00137	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0013a	83 c1 04	 add	 ecx, 4
  0013d	51		 push	 ecx
  0013e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  00143	83 c4 08	 add	 esp, 8
$LN4@Reallocate:

; 4592 :         }
; 4593 : 
; 4594 :         return *this;

  00146	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4595 :     }

  00149	52		 push	 edx
  0014a	8b cd		 mov	 ecx, ebp
  0014c	50		 push	 eax
  0014d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  00153	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00158	58		 pop	 eax
  00159	5a		 pop	 edx
  0015a	5f		 pop	 edi
  0015b	5e		 pop	 esi
  0015c	5b		 pop	 ebx
  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  0016d	3b ec		 cmp	 ebp, esp
  0016f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c2 0c 00	 ret	 12			; 0000000cH
  0017a	66 90		 npad	 2
$LN8@Reallocate:
  0017c	01 00 00 00	 DD	 1
  00180	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00184	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00188	04 00 00 00	 DD	 4
  0018c	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00190	5f		 DB	 95			; 0000005fH
  00191	4e		 DB	 78			; 0000004eH
  00192	65		 DB	 101			; 00000065H
  00193	77		 DB	 119			; 00000077H
  00194	5f		 DB	 95			; 0000005fH
  00195	70		 DB	 112			; 00000070H
  00196	74		 DB	 116			; 00000074H
  00197	72		 DB	 114			; 00000072H
  00198	00		 DB	 0
??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ch$ = 20						; size = 1
??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z PROC ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator(), COMDAT
; _this$ = ecx

; 3871 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  00010	b9 06 00 00 00	 mov	 ecx, 6
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3872 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  0002a	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3873 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  0003e	8d 45 14	 lea	 eax, DWORD PTR __Ch$[ebp]
  00041	50		 push	 eax
  00042	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00045	03 4d 10	 add	 ecx, DWORD PTR __Old_size$[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  0004e	83 c4 08	 add	 esp, 8

; 3874 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  00051	c6 85 2f ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  00058	8d 85 2f ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0005e	50		 push	 eax
  0005f	8b 4d 10	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  00062	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00065	8d 44 0a 01	 lea	 eax, DWORD PTR [edx+ecx+1]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  0006f	83 c4 08	 add	 esp, 8

; 3875 :             },

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 10 00	 ret	 16			; 00000010H
??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z ENDP ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 294  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __264C4909_xstddef
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 266  :     return _Ptr;

  00021	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 267  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 1366 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00046	3b ec		 cmp	 ebp, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx

; 1371 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
  00033	83 c4 04	 add	 esp, 4
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 821  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 956  : _NODISCARD constexpr _Size_type _Convert_size(const size_t _Len) noexcept(is_same_v<_Size_type, size_t>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 957  :     // convert size_t to _Size_type, avoiding truncation
; 958  :     if constexpr (!is_same_v<_Size_type, size_t>) {
; 959  :         if (_Len > (numeric_limits<_Size_type>::max) ()) {
; 960  :             _Xlength_error("size_t too long for _Size_type");
; 961  :         }
; 962  :     }
; 963  : 
; 964  :     return static_cast<_Size_type>(_Len);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Len$[ebp]

; 965  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
__New_proxy$ = -20					; size = 4
_this$ = -8						; size = 4
__Al$ = 8						; size = 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1052 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  00010	b9 09 00 00 00	 mov	 ecx, 9
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1053 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

  0002a	6a 01		 push	 1
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0002f	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 45 ec	 mov	 DWORD PTR __New_proxy$[ebp], eax

; 1054 :         _Construct_in_place(*_New_proxy, this);

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00049	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0004f	51		 push	 ecx
  00050	8b 55 ec	 mov	 edx, DWORD PTR __New_proxy$[ebp]
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00059	83 c4 08	 add	 esp, 8

; 1055 :         _Myproxy            = _New_proxy;

  0005c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d ec	 mov	 ecx, DWORD PTR __New_proxy$[ebp]
  00062	89 08		 mov	 DWORD PTR [eax], ecx

; 1056 :         _New_proxy->_Mycont = this;

  00064	8b 45 ec	 mov	 eax, DWORD PTR __New_proxy$[ebp]
  00067	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	89 08		 mov	 DWORD PTR [eax], ecx

; 1057 :     }

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00075	3b ec		 cmp	 ebp, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1330 :     _CONSTEXPR20 ~_Container_proxy_ptr12() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1331 :         if (_Ptr) {

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00030	74 15		 je	 SHORT $LN3@Container_

; 1332 :             _Delete_plain_internal(_Al, _Ptr);

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	51		 push	 ecx
  00038	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00044	83 c4 08	 add	 esp, 8
$LN3@Container_:

; 1333 :         }
; 1334 :     }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
__Al_$ = 8						; size = 4
__Mycont$ = 12						; size = 4
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1316 :     _CONSTEXPR20 _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  00010	b9 06 00 00 00	 mov	 ecx, 6
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Basic_container_proxy_ptr12@std@@IAE@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  00038	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1317 :         // create a new _Container_proxy pointing at _Mycont
; 1318 :         _Ptr = _Unfancy(_Al_.allocate(1));

  0003b	6a 01		 push	 1
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  00040	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0004b	83 c4 04	 add	 esp, 4
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	89 01		 mov	 DWORD PTR [ecx], eax

; 1319 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

  00053	8b 45 0c	 mov	 eax, DWORD PTR __Mycont$[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
  0005c	83 c4 04	 add	 esp, 4
  0005f	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00065	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0006b	51		 push	 ecx
  0006c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0006f	8b 02		 mov	 eax, DWORD PTR [edx]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00077	83 c4 08	 add	 esp, 8

; 1320 :         _Mycont._Myproxy = _Ptr;

  0007a	8b 45 0c	 mov	 eax, DWORD PTR __Mycont$[ebp]
  0007d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	8b 11		 mov	 edx, DWORD PTR [ecx]
  00082	89 10		 mov	 DWORD PTR [eax], edx

; 1321 :     }

  00084	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00090	3b ec		 cmp	 ebp, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 980  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 981  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 982  :     using _Ty = typename _Alloc::value_type;
; 983  :     _Ptr->~_Ty();
; 984  :     _Deallocate_plain(_Al, _Ptr);

  00021	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
  0002e	83 c4 08	 add	 esp, 8

; 985  : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 830  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 831  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$07@std@@YAII@Z ; std::_Get_size_of_n<8>
  00033	83 c4 04	 add	 esp, 4
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0003c	83 c4 04	 add	 esp, 4

; 832  :     }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\utility
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
$T1 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  0000f	b9 04 00 00 00	 mov	 ecx, 4
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __D153DE1B_utility
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

  00025	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0002b	8b 10		 mov	 edx, DWORD PTR [eax]
  0002d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002f	73 0b		 jae	 SHORT $LN3@min
  00031	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00034	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  0003a	eb 09		 jmp	 SHORT $LN4@min
$LN3@min:
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0003f	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
$LN4@min:
  00045	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  0004b	89 95 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  00051	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]

; 67   : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 123  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 124  :             return _Ok;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 125  :         }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -229						; size = 1
__Zero_uncaught_exceptions$ = -29			; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 108  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 109  : #if !_HAS_EXCEPTIONS
; 110  :             const bool _Zero_uncaught_exceptions = true;
; 111  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 112  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00049	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0004e	0f b6 c0	 movzx	 eax, al
  00051	85 c0		 test	 eax, eax
  00053	75 09		 jne	 SHORT $LN4@sentry
  00055	c6 85 1b ff ff
	ff 01		 mov	 BYTE PTR tv72[ebp], 1
  0005c	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  0005e	c6 85 1b ff ff
	ff 00		 mov	 BYTE PTR tv72[ebp], 0
$LN5@sentry:
  00065	8a 8d 1b ff ff
	ff		 mov	 cl, BYTE PTR tv72[ebp]
  0006b	88 4d e3	 mov	 BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 113  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 114  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 115  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 116  : 
; 117  :             if (_Zero_uncaught_exceptions) {

  0006e	0f b6 45 e3	 movzx	 eax, BYTE PTR __Zero_uncaught_exceptions$[ebp]
  00072	85 c0		 test	 eax, eax
  00074	74 14		 je	 SHORT $LN1@sentry

; 118  :                 this->_Myostr._Osfx();

  00076	8b f4		 mov	 esi, esp
  00078	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 119  :             }
; 120  :         }

  0008a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
  000b1	cc		 int	 3
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Tied$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 91   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0001e	b9 06 00 00 00	 mov	 ecx, 6
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00049	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 92   :             if (!_Ostr.good()) {

  0005c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00064	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00067	8b f4		 mov	 esi, esp
  00069	8b ca		 mov	 ecx, edx
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	0f b6 c0	 movzx	 eax, al
  0007b	85 c0		 test	 eax, eax
  0007d	75 09		 jne	 SHORT $LN2@sentry

; 93   :                 _Ok = false;

  0007f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00082	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 94   :                 return;

  00086	eb 6a		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 95   :             }
; 96   : 
; 97   :             const auto _Tied = _Ostr.tie();

  00088	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00090	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00093	8b f4		 mov	 esi, esp
  00095	8b ca		 mov	 ecx, edx
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	89 45 e0	 mov	 DWORD PTR __Tied$[ebp], eax

; 98   :             if (!_Tied || _Tied == &_Ostr) {

  000a7	83 7d e0 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  000ab	74 08		 je	 SHORT $LN4@sentry
  000ad	8b 45 e0	 mov	 eax, DWORD PTR __Tied$[ebp]
  000b0	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b3	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 99   :                 _Ok = true;

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 100  :                 return;

  000bc	eb 34		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 101  :             }
; 102  : 
; 103  :             _Tied->flush();

  000be	8b f4		 mov	 esi, esp
  000c0	8b 4d e0	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 104  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000d0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000d8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000db	8b f4		 mov	 esi, esp
  000dd	8b ca		 mov	 ecx, edx
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000e5	3b f4		 cmp	 esi, esp
  000e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ec	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 105  :         }

  000f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00106	59		 pop	 ecx
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00110	3b ec		 cmp	 ebp, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 77   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 78   :             const auto _Rdbuf = _Myostr.rdbuf();

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00054	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00062	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00065	8b f4		 mov	 esi, esp
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	89 45 e0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 79   :             if (_Rdbuf) {

  00077	83 7d e0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0007b	74 16		 je	 SHORT $LN3@Sentry_bas

; 80   :                 _Rdbuf->_Unlock();

  0007d	8b 45 e0	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00080	8b 10		 mov	 edx, DWORD PTR [eax]
  00082	8b f4		 mov	 esi, esp
  00084	8b 4d e0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00087	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008a	ff d0		 call	 eax
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 81   :             }
; 82   :         }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
  000b6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 70   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 71   :             const auto _Rdbuf = _Myostr.rdbuf();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  0003d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004e	8b f4		 mov	 esi, esp
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 72   :             if (_Rdbuf) {

  00060	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00064	74 16		 je	 SHORT $LN1@Sentry_bas

; 73   :                 _Rdbuf->_Lock();

  00066	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00069	8b 10		 mov	 edx, DWORD PTR [eax]
  0006b	8b f4		 mov	 esi, esp
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00070	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00073	ff d0		 call	 eax
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 74   :             }
; 75   :         }

  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
tv261 = -336						; size = 4
tv259 = -336						; size = 4
tv257 = -336						; size = 8
tv256 = -336						; size = 8
tv255 = -336						; size = 8
tv252 = -336						; size = 4
tv260 = -332						; size = 4
tv258 = -332						; size = 4
tv65 = -332						; size = 4
tv262 = -329						; size = 1
$T2 = -324						; size = 4
$T3 = -312						; size = 4
$T4 = -300						; size = 8
__Meta$5 = -92						; size = 4
__Size$6 = -80						; size = 4
__Ctype_fac$7 = -68					; size = 4
__Ok$ = -56						; size = 8
__Changed$ = -37					; size = 1
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator>><char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4947 :     basic_istream<_Elem, _Traits>& _Istr, basic_string<_Elem, _Traits, _Alloc>& _Str) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 40 01 00
	00		 sub	 esp, 320		; 00000140H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-144]
  00021	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4948 :     using _Myis   = basic_istream<_Elem, _Traits>;
; 4949 :     using _Ctype  = typename _Myis::_Ctype;
; 4950 :     using _Mystr  = basic_string<_Elem, _Traits, _Alloc>;
; 4951 :     using _Mysizt = typename _Mystr::size_type;
; 4952 : 
; 4953 :     typename _Myis::iostate _State = _Myis::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 4954 :     bool _Changed                  = false;

  00055	c6 45 db 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 4955 :     const typename _Myis::sentry _Ok(_Istr);

  00059	6a 00		 push	 0
  0005b	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0005e	50		 push	 eax
  0005f	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00062	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 4956 : 
; 4957 :     if (_Ok) { // state okay, extract characters

  0006e	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00071	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  00076	0f b6 c0	 movzx	 eax, al
  00079	85 c0		 test	 eax, eax
  0007b	0f 84 7b 02 00
	00		 je	 $LN5@operator

; 4958 :         const _Ctype& _Ctype_fac = _STD use_facet<_Ctype>(_Istr.getloc());

  00081	8b f4		 mov	 esi, esp
  00083	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00089	50		 push	 eax
  0008a	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0008d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00092	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  0009b	3b f4		 cmp	 esi, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  000a8	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  000ae	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv252[ebp], eax
  000b4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000b8	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv252[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  000c4	83 c4 04	 add	 esp, 4
  000c7	89 45 bc	 mov	 DWORD PTR __Ctype_fac$7[ebp], eax
  000ca	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000ce	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  000d4	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 4959 :         _Str.erase();

  000d9	6a 00		 push	 0
  000db	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  000de	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 4960 : 
; 4961 :         _TRY_IO_BEGIN

  000e3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 4962 :         _Mysizt _Size;
; 4963 :         if (0 < _Istr.width() && static_cast<_Mysizt>(_Istr.width()) < _Str.max_size()) {

  000e7	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ec	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  000ef	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000f2	8b f4		 mov	 esi, esp
  000f4	8b ca		 mov	 ecx, edx
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000fc	3b f4		 cmp	 esi, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv255[ebp], eax
  00109	89 95 b4 fe ff
	ff		 mov	 DWORD PTR tv255[ebp+4], edx
  0010f	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR tv255[ebp+4], 0
  00116	7c 76		 jl	 SHORT $LN7@operator
  00118	7f 09		 jg	 SHORT $LN21@operator
  0011a	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv255[ebp], 0
  00121	76 6b		 jbe	 SHORT $LN7@operator
$LN21@operator:
  00123	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00126	8b 08		 mov	 ecx, DWORD PTR [eax]
  00128	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0012b	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0012e	8b f4		 mov	 esi, esp
  00130	8b ca		 mov	 ecx, edx
  00132	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00138	3b f4		 cmp	 esi, esp
  0013a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013f	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv256[ebp], eax
  00145	89 95 b4 fe ff
	ff		 mov	 DWORD PTR tv256[ebp+4], edx
  0014b	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0014e	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00153	39 85 b0 fe ff
	ff		 cmp	 DWORD PTR tv256[ebp], eax
  00159	73 33		 jae	 SHORT $LN7@operator

; 4964 :             _Size = static_cast<_Mysizt>(_Istr.width());

  0015b	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0015e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00160	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00163	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00166	8b f4		 mov	 esi, esp
  00168	8b ca		 mov	 ecx, edx
  0016a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00170	3b f4		 cmp	 esi, esp
  00172	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00177	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv257[ebp], eax
  0017d	89 95 b4 fe ff
	ff		 mov	 DWORD PTR tv257[ebp+4], edx
  00183	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv257[ebp]
  00189	89 45 b0	 mov	 DWORD PTR __Size$6[ebp], eax

; 4965 :         } else {

  0018c	eb 0b		 jmp	 SHORT $LN8@operator
$LN7@operator:

; 4966 :             _Size = _Str.max_size();

  0018e	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00191	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00196	89 45 b0	 mov	 DWORD PTR __Size$6[ebp], eax
$LN8@operator:

; 4967 :         }
; 4968 : 
; 4969 :         typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  00199	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0019c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019e	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  001a1	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001a4	8b f4		 mov	 esi, esp
  001a6	8b ca		 mov	 ecx, edx
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001ae	3b f4		 cmp	 esi, esp
  001b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b5	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv258[ebp], eax
  001bb	8b f4		 mov	 esi, esp
  001bd	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR tv258[ebp]
  001c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  001c9	3b f4		 cmp	 esi, esp
  001cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d0	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv259[ebp], eax
  001d6	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv259[ebp]
  001dc	89 45 a4	 mov	 DWORD PTR __Meta$5[ebp], eax

; 4970 : 
; 4971 :         for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc()) {

  001df	eb 4d		 jmp	 SHORT $LN4@operator
$LN2@operator:
  001e1	8b 45 b0	 mov	 eax, DWORD PTR __Size$6[ebp]
  001e4	83 e8 01	 sub	 eax, 1
  001e7	89 45 b0	 mov	 DWORD PTR __Size$6[ebp], eax
  001ea	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  001ed	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ef	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  001f2	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  001f5	8b f4		 mov	 esi, esp
  001f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001fd	3b f4		 cmp	 esi, esp
  001ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00204	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv260[ebp], eax
  0020a	8b f4		 mov	 esi, esp
  0020c	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR tv260[ebp]
  00212	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  00218	3b f4		 cmp	 esi, esp
  0021a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021f	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv261[ebp], eax
  00225	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv261[ebp]
  0022b	89 45 a4	 mov	 DWORD PTR __Meta$5[ebp], eax
$LN4@operator:
  0022e	83 7d b0 00	 cmp	 DWORD PTR __Size$6[ebp], 0
  00232	0f 86 8c 00 00
	00		 jbe	 $LN3@operator

; 4972 :             if (_Traits::eq_int_type(_Traits::eof(), _Meta)) { // end of file, quit

  00238	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0023d	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00243	8d 45 a4	 lea	 eax, DWORD PTR __Meta$5[ebp]
  00246	50		 push	 eax
  00247	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0024d	51		 push	 ecx
  0024e	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00253	83 c4 08	 add	 esp, 8
  00256	0f b6 d0	 movzx	 edx, al
  00259	85 d2		 test	 edx, edx
  0025b	74 0d		 je	 SHORT $LN9@operator

; 4973 :                 _State |= _Myis::eofbit;

  0025d	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00260	83 c8 01	 or	 eax, 1
  00263	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 4974 :                 break;

  00266	eb 5c		 jmp	 SHORT $LN3@operator
  00268	eb 55		 jmp	 SHORT $LN10@operator
$LN9@operator:

; 4975 :             } else if (_Ctype_fac.is(_Ctype::space, _Traits::to_char_type(_Meta))) {

  0026a	8d 45 a4	 lea	 eax, DWORD PTR __Meta$5[ebp]
  0026d	50		 push	 eax
  0026e	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  00273	83 c4 04	 add	 esp, 4
  00276	8b f4		 mov	 esi, esp
  00278	0f b6 c8	 movzx	 ecx, al
  0027b	51		 push	 ecx
  0027c	6a 48		 push	 72			; 00000048H
  0027e	8b 4d bc	 mov	 ecx, DWORD PTR __Ctype_fac$7[ebp]
  00281	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?is@?$ctype@D@std@@QBE_NFD@Z
  00287	3b f4		 cmp	 esi, esp
  00289	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0028e	88 85 b7 fe ff
	ff		 mov	 BYTE PTR tv262[ebp], al
  00294	0f b6 95 b7 fe
	ff ff		 movzx	 edx, BYTE PTR tv262[ebp]
  0029b	85 d2		 test	 edx, edx
  0029d	74 04		 je	 SHORT $LN11@operator

; 4976 :                 break; // whitespace, quit

  0029f	eb 23		 jmp	 SHORT $LN3@operator

; 4977 :             } else { // add character to string

  002a1	eb 1c		 jmp	 SHORT $LN10@operator
$LN11@operator:

; 4978 :                 _Str.push_back(_Traits::to_char_type(_Meta));

  002a3	8d 45 a4	 lea	 eax, DWORD PTR __Meta$5[ebp]
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  002ac	83 c4 04	 add	 esp, 4
  002af	0f b6 c8	 movzx	 ecx, al
  002b2	51		 push	 ecx
  002b3	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  002b6	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back

; 4979 :                 _Changed = true;

  002bb	c6 45 db 01	 mov	 BYTE PTR __Changed$[ebp], 1
$LN10@operator:

; 4980 :             }
; 4981 :         }

  002bf	e9 1d ff ff ff	 jmp	 $LN2@operator
$LN3@operator:
  002c4	eb 26		 jmp	 SHORT $LN15@operator
__catch$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0:

; 4982 :         _CATCH_IO_(_Myis, _Istr)

  002c6	8b f4		 mov	 esi, esp
  002c8	6a 01		 push	 1
  002ca	6a 04		 push	 4
  002cc	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  002cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d1	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  002d4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002d7	8b ca		 mov	 ecx, edx
  002d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  002df	3b f4		 cmp	 esi, esp
  002e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e6	b8 00 00 00 00	 mov	 eax, $LN20@operator
  002eb	c3		 ret	 0
$LN15@operator:
  002ec	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  002f3	eb 07		 jmp	 SHORT $LN5@operator
$LN20@operator:
  002f5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN5@operator:

; 4983 :     }
; 4984 : 
; 4985 :     _Istr.width(0);

  002fc	8b f4		 mov	 esi, esp
  002fe	6a 00		 push	 0
  00300	6a 00		 push	 0
  00302	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00305	8b 08		 mov	 ecx, DWORD PTR [eax]
  00307	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0030a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0030d	8b ca		 mov	 ecx, edx
  0030f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  00315	3b f4		 cmp	 esi, esp
  00317	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 4986 :     if (!_Changed) {

  0031c	0f b6 45 db	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00320	85 c0		 test	 eax, eax
  00322	75 09		 jne	 SHORT $LN13@operator

; 4987 :         _State |= _Myis::failbit;

  00324	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00327	83 c8 02	 or	 eax, 2
  0032a	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 4988 :     }
; 4989 : 
; 4990 :     _Istr.setstate(_State);

  0032d	8b f4		 mov	 esi, esp
  0032f	6a 00		 push	 0
  00331	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00334	50		 push	 eax
  00335	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00338	8b 11		 mov	 edx, DWORD PTR [ecx]
  0033a	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0033d	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00340	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00346	3b f4		 cmp	 esi, esp
  00348	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 4991 :     return _Istr;

  0034d	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00350	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00356	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0035d	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00360	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00365	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 4992 : }

  0036b	52		 push	 edx
  0036c	8b cd		 mov	 ecx, ebp
  0036e	50		 push	 eax
  0036f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN26@operator
  00375	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0037a	58		 pop	 eax
  0037b	5a		 pop	 edx
  0037c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0037f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00386	59		 pop	 ecx
  00387	5f		 pop	 edi
  00388	5e		 pop	 esi
  00389	5b		 pop	 ebx
  0038a	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0038d	33 cd		 xor	 ecx, ebp
  0038f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00394	81 c4 50 01 00
	00		 add	 esp, 336		; 00000150H
  0039a	3b ec		 cmp	 ebp, esp
  0039c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a1	8b e5		 mov	 esp, ebp
  003a3	5d		 pop	 ebp
  003a4	c3		 ret	 0
  003a5	0f 1f 00	 npad	 3
$LN26@operator:
  003a8	02 00 00 00	 DD	 2
  003ac	00 00 00 00	 DD	 $LN25@operator
$LN25@operator:
  003b0	c8 ff ff ff	 DD	 -56			; ffffffc8H
  003b4	08 00 00 00	 DD	 8
  003b8	00 00 00 00	 DD	 $LN22@operator
  003bc	a4 ff ff ff	 DD	 -92			; ffffffa4H
  003c0	04 00 00 00	 DD	 4
  003c4	00 00 00 00	 DD	 $LN23@operator
$LN23@operator:
  003c8	5f		 DB	 95			; 0000005fH
  003c9	4d		 DB	 77			; 0000004dH
  003ca	65		 DB	 101			; 00000065H
  003cb	74		 DB	 116			; 00000074H
  003cc	61		 DB	 97			; 00000061H
  003cd	00		 DB	 0
$LN22@operator:
  003ce	5f		 DB	 95			; 0000005fH
  003cf	4f		 DB	 79			; 0000004fH
  003d0	6b		 DB	 107			; 0000006bH
  003d1	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__unwindfunclet$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$3:
  00008	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 8a ac fe ff
	ff		 mov	 ecx, DWORD PTR [edx-340]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\_УЧЁБА_\Лабораторные работы\КПО (Наркевич)\Лаба 4\Лаба 1\SE_Lab02.cpp
;	COMDAT _main
_TEXT	SEGMENT
tv215 = -476						; size = 4
tv199 = -476						; size = 4
tv286 = -473						; size = 1
$T2 = -468						; size = 4
$T3 = -456						; size = 4
$T4 = -444						; size = 4
$T5 = -432						; size = 4
$T6 = -420						; size = 4
_distance$ = -216					; size = 4
_i_month$ = -204					; size = 4
_month$ = -192						; size = 2
_num_birthday$ = -180					; size = 4
_num$ = -168						; size = 4
_num_of_days$ = -156					; size = 52
_birthday$ = -96					; size = 28
_str$ = -60						; size = 28
_vis$ = -21						; size = 1
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_main	PROC						; COMDAT

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_main
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d0 01 00
	00		 sub	 esp, 464		; 000001d0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd e4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-284]
  00020	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET __A3F7A43C_SE_Lab02@cpp
  00045	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 107  : 	setlocale(LC_ALL, "Rus");

  0004a	8b f4		 mov	 esi, esp
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_03OJJHGHEE@Rus@
  00051	6a 00		 push	 0
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale
  00059	83 c4 08	 add	 esp, 8
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 108  : 	bool vis = false;

  00063	c6 45 eb 00	 mov	 BYTE PTR _vis$[ebp], 0

; 109  : 	string str, birthday;

  00067	8d 4d c4	 lea	 ecx, DWORD PTR _str$[ebp]
  0006a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00076	8d 4d a0	 lea	 ecx, DWORD PTR _birthday$[ebp]
  00079	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0007e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 110  : 	int num_of_days[13] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  00082	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _num_of_days$[ebp], 0
  0008c	c7 85 68 ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _num_of_days$[ebp+4], 31 ; 0000001fH
  00096	c7 85 6c ff ff
	ff 1c 00 00 00	 mov	 DWORD PTR _num_of_days$[ebp+8], 28 ; 0000001cH
  000a0	c7 85 70 ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _num_of_days$[ebp+12], 31 ; 0000001fH
  000aa	c7 85 74 ff ff
	ff 1e 00 00 00	 mov	 DWORD PTR _num_of_days$[ebp+16], 30 ; 0000001eH
  000b4	c7 85 78 ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR _num_of_days$[ebp+20], 31 ; 0000001fH
  000be	c7 85 7c ff ff
	ff 1e 00 00 00	 mov	 DWORD PTR _num_of_days$[ebp+24], 30 ; 0000001eH
  000c8	c7 45 80 1f 00
	00 00		 mov	 DWORD PTR _num_of_days$[ebp+28], 31 ; 0000001fH
  000cf	c7 45 84 1f 00
	00 00		 mov	 DWORD PTR _num_of_days$[ebp+32], 31 ; 0000001fH
  000d6	c7 45 88 1e 00
	00 00		 mov	 DWORD PTR _num_of_days$[ebp+36], 30 ; 0000001eH
  000dd	c7 45 8c 1f 00
	00 00		 mov	 DWORD PTR _num_of_days$[ebp+40], 31 ; 0000001fH
  000e4	c7 45 90 1e 00
	00 00		 mov	 DWORD PTR _num_of_days$[ebp+44], 30 ; 0000001eH
  000eb	c7 45 94 1f 00
	00 00		 mov	 DWORD PTR _num_of_days$[ebp+48], 31 ; 0000001fH

; 111  : 	cout << "Enter your birthday DDMMYYYY ";

  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MHAJIBFG@Enter?5your?5birthday?5DDMMYYYY?5@
  000f7	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00102	83 c4 08	 add	 esp, 8

; 112  : 	cin >> birthday;

  00105	8d 45 a0	 lea	 eax, DWORD PTR _birthday$[ebp]
  00108	50		 push	 eax
  00109	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  0010f	51		 push	 ecx
  00110	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
  00115	83 c4 08	 add	 esp, 8

; 113  : 	inc_input_check(birthday, num_of_days);

  00118	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _num_of_days$[ebp]
  0011e	50		 push	 eax
  0011f	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00122	8b cc		 mov	 ecx, esp
  00124	89 a5 5c fe ff
	ff		 mov	 DWORD PTR $T6[ebp], esp
  0012a	8d 55 a0	 lea	 edx, DWORD PTR _birthday$[ebp]
  0012d	52		 push	 edx
  0012e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00133	e8 00 00 00 00	 call	 ?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z ; inc_input_check
  00138	83 c4 20	 add	 esp, 32			; 00000020H

; 114  : 	cout << "Enter string: ";

  0013b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DMAKLLDH@Enter?5string?3?5@
  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0014b	83 c4 08	 add	 esp, 8

; 115  : 	cin >> str;

  0014e	8d 45 c4	 lea	 eax, DWORD PTR _str$[ebp]
  00151	50		 push	 eax
  00152	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  00158	51		 push	 ecx
  00159	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
  0015e	83 c4 08	 add	 esp, 8

; 116  : 	cout << endl;

  00161	8b f4		 mov	 esi, esp
  00163	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00168	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0016e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00174	3b f4		 cmp	 esi, esp
  00176	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 117  : 	inc_input_check(str, num_of_days);

  0017b	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _num_of_days$[ebp]
  00181	50		 push	 eax
  00182	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00185	8b cc		 mov	 ecx, esp
  00187	89 a5 50 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], esp
  0018d	8d 55 c4	 lea	 edx, DWORD PTR _str$[ebp]
  00190	52		 push	 edx
  00191	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00196	e8 00 00 00 00	 call	 ?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z ; inc_input_check
  0019b	83 c4 20	 add	 esp, 32			; 00000020H

; 118  : 	vis = def_vis_year(str);

  0019e	83 ec 1c	 sub	 esp, 28			; 0000001cH
  001a1	8b cc		 mov	 ecx, esp
  001a3	89 a5 44 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], esp
  001a9	8d 45 c4	 lea	 eax, DWORD PTR _str$[ebp]
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001b2	e8 00 00 00 00	 call	 ?def_vis_year@@YA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; def_vis_year
  001b7	83 c4 1c	 add	 esp, 28			; 0000001cH
  001ba	88 85 27 fe ff
	ff		 mov	 BYTE PTR tv286[ebp], al
  001c0	8a 8d 27 fe ff
	ff		 mov	 cl, BYTE PTR tv286[ebp]
  001c6	88 4d eb	 mov	 BYTE PTR _vis$[ebp], cl

; 119  : 	if (vis)

  001c9	0f b6 45 eb	 movzx	 eax, BYTE PTR _vis$[ebp]
  001cd	85 c0		 test	 eax, eax
  001cf	74 1f		 je	 SHORT $LN2@main

; 120  : 	{
; 121  : 		num_of_days[2] += 1;

  001d1	b8 04 00 00 00	 mov	 eax, 4
  001d6	d1 e0		 shl	 eax, 1
  001d8	8b 8c 05 64 ff
	ff ff		 mov	 ecx, DWORD PTR _num_of_days$[ebp+eax]
  001df	83 c1 01	 add	 ecx, 1
  001e2	ba 04 00 00 00	 mov	 edx, 4
  001e7	d1 e2		 shl	 edx, 1
  001e9	89 8c 15 64 ff
	ff ff		 mov	 DWORD PTR _num_of_days$[ebp+edx], ecx
$LN2@main:

; 122  : 	}
; 123  : 	prog_day_date(num_of_days);

  001f0	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _num_of_days$[ebp]
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 ?prog_day_date@@YAXPAH@Z ; prog_day_date
  001fc	83 c4 04	 add	 esp, 4

; 124  : 	int num = num_in_year(str, num_of_days);

  001ff	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _num_of_days$[ebp]
  00205	50		 push	 eax
  00206	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00209	8b cc		 mov	 ecx, esp
  0020b	89 a5 38 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
  00211	8d 55 c4	 lea	 edx, DWORD PTR _str$[ebp]
  00214	52		 push	 edx
  00215	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0021a	e8 00 00 00 00	 call	 ?num_in_year@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z ; num_in_year
  0021f	83 c4 20	 add	 esp, 32			; 00000020H
  00222	89 85 24 fe ff
	ff		 mov	 DWORD PTR tv199[ebp], eax
  00228	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR tv199[ebp]
  0022e	89 85 58 ff ff
	ff		 mov	 DWORD PTR _num$[ebp], eax

; 125  : 	int num_birthday = num_in_year(birthday, num_of_days);

  00234	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _num_of_days$[ebp]
  0023a	50		 push	 eax
  0023b	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0023e	8b cc		 mov	 ecx, esp
  00240	89 a5 2c fe ff
	ff		 mov	 DWORD PTR $T2[ebp], esp
  00246	8d 55 a0	 lea	 edx, DWORD PTR _birthday$[ebp]
  00249	52		 push	 edx
  0024a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0024f	e8 00 00 00 00	 call	 ?num_in_year@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z ; num_in_year
  00254	83 c4 20	 add	 esp, 32			; 00000020H
  00257	89 85 24 fe ff
	ff		 mov	 DWORD PTR tv215[ebp], eax
  0025d	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR tv215[ebp]
  00263	89 85 4c ff ff
	ff		 mov	 DWORD PTR _num_birthday$[ebp], eax

; 126  : 	char month[2] {str[2], str[3]};

  00269	6a 02		 push	 2
  0026b	8d 4d c4	 lea	 ecx, DWORD PTR _str$[ebp]
  0026e	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00273	8a 00		 mov	 al, BYTE PTR [eax]
  00275	88 85 40 ff ff
	ff		 mov	 BYTE PTR _month$[ebp], al
  0027b	6a 03		 push	 3
  0027d	8d 4d c4	 lea	 ecx, DWORD PTR _str$[ebp]
  00280	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00285	8a 00		 mov	 al, BYTE PTR [eax]
  00287	88 85 41 ff ff
	ff		 mov	 BYTE PTR _month$[ebp+1], al

; 127  : 	int i_month = atoi(month);

  0028d	8b f4		 mov	 esi, esp
  0028f	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _month$[ebp]
  00295	50		 push	 eax
  00296	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0029c	83 c4 04	 add	 esp, 4
  0029f	3b f4		 cmp	 esi, esp
  002a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002a6	89 85 34 ff ff
	ff		 mov	 DWORD PTR _i_month$[ebp], eax

; 128  : 	int distance = abs(num - num_birthday);

  002ac	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _num$[ebp]
  002b2	2b 85 4c ff ff
	ff		 sub	 eax, DWORD PTR _num_birthday$[ebp]
  002b8	50		 push	 eax
  002b9	e8 00 00 00 00	 call	 _abs
  002be	83 c4 04	 add	 esp, 4
  002c1	89 85 28 ff ff
	ff		 mov	 DWORD PTR _distance$[ebp], eax

; 129  : 	if (distance <= 183)

  002c7	81 bd 28 ff ff
	ff b7 00 00 00	 cmp	 DWORD PTR _distance$[ebp], 183 ; 000000b7H
  002d1	7f 16		 jg	 SHORT $LN3@main

; 130  : 	{
; 131  : 		printf("Дней до моего дня рождения: %d\n", distance);

  002d3	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _distance$[ebp]
  002d9	50		 push	 eax
  002da	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JKPKAFKJ@?D?m?e?i?5?d?n?5?l?n?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5?$CFd?6@
  002df	e8 00 00 00 00	 call	 _printf
  002e4	83 c4 08	 add	 esp, 8

; 132  : 	}

  002e7	eb 45		 jmp	 SHORT $LN4@main
$LN3@main:

; 133  : 	else if ((i_month >= 3) && vis)

  002e9	83 bd 34 ff ff
	ff 03		 cmp	 DWORD PTR _i_month$[ebp], 3
  002f0	7c 23		 jl	 SHORT $LN5@main
  002f2	0f b6 45 eb	 movzx	 eax, BYTE PTR _vis$[ebp]
  002f6	85 c0		 test	 eax, eax
  002f8	74 1b		 je	 SHORT $LN5@main

; 134  : 	{
; 135  : 		printf("Дней до моего дня рождения: %d\n", 366 - distance);

  002fa	b8 6e 01 00 00	 mov	 eax, 366		; 0000016eH
  002ff	2b 85 28 ff ff
	ff		 sub	 eax, DWORD PTR _distance$[ebp]
  00305	50		 push	 eax
  00306	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JKPKAFKJ@?D?m?e?i?5?d?n?5?l?n?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5?$CFd?6@
  0030b	e8 00 00 00 00	 call	 _printf
  00310	83 c4 08	 add	 esp, 8

; 136  : 	}

  00313	eb 19		 jmp	 SHORT $LN4@main
$LN5@main:

; 137  : 	else
; 138  : 	{
; 139  : 		printf("Дней до моего дня рождения: %d\n", 365 - distance);

  00315	b8 6d 01 00 00	 mov	 eax, 365		; 0000016dH
  0031a	2b 85 28 ff ff
	ff		 sub	 eax, DWORD PTR _distance$[ebp]
  00320	50		 push	 eax
  00321	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JKPKAFKJ@?D?m?e?i?5?d?n?5?l?n?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?3?5?$CFd?6@
  00326	e8 00 00 00 00	 call	 _printf
  0032b	83 c4 08	 add	 esp, 8
$LN4@main:

; 140  : 	}
; 141  : 	if (vis == true)

  0032e	0f b6 45 eb	 movzx	 eax, BYTE PTR _vis$[ebp]
  00332	83 f8 01	 cmp	 eax, 1
  00335	75 2b		 jne	 SHORT $LN7@main

; 142  : 	{
; 143  : 		cout << "Год високосный" << endl;

  00337	8b f4		 mov	 esi, esp
  00339	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0033e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KPEAGGJF@?C?n?d?5?b?h?q?n?j?n?q?m?$PL?i@
  00343	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00348	50		 push	 eax
  00349	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0034e	83 c4 08	 add	 esp, 8
  00351	8b c8		 mov	 ecx, eax
  00353	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00359	3b f4		 cmp	 esi, esp
  0035b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 144  : 	}

  00360	eb 29		 jmp	 SHORT $LN8@main
$LN7@main:

; 145  : 	else
; 146  : 	{
; 147  : 		cout << "Год невисокосный" << endl;

  00362	8b f4		 mov	 esi, esp
  00364	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00369	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BFBFCOHA@?C?n?d?5?m?e?b?h?q?n?j?n?q?m?$PL?i@
  0036e	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00373	50		 push	 eax
  00374	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00379	83 c4 08	 add	 esp, 8
  0037c	8b c8		 mov	 ecx, eax
  0037e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00384	3b f4		 cmp	 esi, esp
  00386	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN8@main:

; 148  : 	}
; 149  : 	cout << "Номер дня в году: " << num << endl;

  0038b	8b f4		 mov	 esi, esp
  0038d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00392	8b fc		 mov	 edi, esp
  00394	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _num$[ebp]
  0039a	50		 push	 eax
  0039b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LIFACDMA@?M?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?3?5@
  003a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003a6	51		 push	 ecx
  003a7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003ac	83 c4 08	 add	 esp, 8
  003af	8b c8		 mov	 ecx, eax
  003b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  003b7	3b fc		 cmp	 edi, esp
  003b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003be	8b c8		 mov	 ecx, eax
  003c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  003c6	3b f4		 cmp	 esi, esp
  003c8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 150  : 	system("pause");

  003cd	8b f4		 mov	 esi, esp
  003cf	68 00 00 00 00	 push	 OFFSET ??_C@_05PDJBBECF@pause@
  003d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  003da	83 c4 04	 add	 esp, 4
  003dd	3b f4		 cmp	 esi, esp
  003df	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 151  : }

  003e4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  003e8	8d 4d a0	 lea	 ecx, DWORD PTR _birthday$[ebp]
  003eb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003f0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003f7	8d 4d c4	 lea	 ecx, DWORD PTR _str$[ebp]
  003fa	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003ff	33 c0		 xor	 eax, eax
  00401	52		 push	 edx
  00402	8b cd		 mov	 ecx, ebp
  00404	50		 push	 eax
  00405	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN23@main
  0040b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00410	58		 pop	 eax
  00411	5a		 pop	 edx
  00412	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00415	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0041c	59		 pop	 ecx
  0041d	5f		 pop	 edi
  0041e	5e		 pop	 esi
  0041f	5b		 pop	 ebx
  00420	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00423	33 cd		 xor	 ecx, ebp
  00425	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0042a	81 c4 dc 01 00
	00		 add	 esp, 476		; 000001dcH
  00430	3b ec		 cmp	 ebp, esp
  00432	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00437	8b e5		 mov	 esp, ebp
  00439	5d		 pop	 ebp
  0043a	c3		 ret	 0
  0043b	90		 npad	 1
$LN23@main:
  0043c	04 00 00 00	 DD	 4
  00440	00 00 00 00	 DD	 $LN22@main
$LN22@main:
  00444	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00448	1c 00 00 00	 DD	 28			; 0000001cH
  0044c	00 00 00 00	 DD	 $LN17@main
  00450	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00454	1c 00 00 00	 DD	 28			; 0000001cH
  00458	00 00 00 00	 DD	 $LN18@main
  0045c	64 ff ff ff	 DD	 -156			; ffffff64H
  00460	34 00 00 00	 DD	 52			; 00000034H
  00464	00 00 00 00	 DD	 $LN19@main
  00468	40 ff ff ff	 DD	 -192			; ffffff40H
  0046c	02 00 00 00	 DD	 2
  00470	00 00 00 00	 DD	 $LN20@main
$LN20@main:
  00474	6d		 DB	 109			; 0000006dH
  00475	6f		 DB	 111			; 0000006fH
  00476	6e		 DB	 110			; 0000006eH
  00477	74		 DB	 116			; 00000074H
  00478	68		 DB	 104			; 00000068H
  00479	00		 DB	 0
$LN19@main:
  0047a	6e		 DB	 110			; 0000006eH
  0047b	75		 DB	 117			; 00000075H
  0047c	6d		 DB	 109			; 0000006dH
  0047d	5f		 DB	 95			; 0000005fH
  0047e	6f		 DB	 111			; 0000006fH
  0047f	66		 DB	 102			; 00000066H
  00480	5f		 DB	 95			; 0000005fH
  00481	64		 DB	 100			; 00000064H
  00482	61		 DB	 97			; 00000061H
  00483	79		 DB	 121			; 00000079H
  00484	73		 DB	 115			; 00000073H
  00485	00		 DB	 0
$LN18@main:
  00486	62		 DB	 98			; 00000062H
  00487	69		 DB	 105			; 00000069H
  00488	72		 DB	 114			; 00000072H
  00489	74		 DB	 116			; 00000074H
  0048a	68		 DB	 104			; 00000068H
  0048b	64		 DB	 100			; 00000064H
  0048c	61		 DB	 97			; 00000061H
  0048d	79		 DB	 121			; 00000079H
  0048e	00		 DB	 0
$LN17@main:
  0048f	73		 DB	 115			; 00000073H
  00490	74		 DB	 116			; 00000074H
  00491	72		 DB	 114			; 00000072H
  00492	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_main$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR _str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_main$1:
  00008	8d 4d a0	 lea	 ecx, DWORD PTR _birthday$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$_main:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 8a 20 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-480]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_main
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_main	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\_УЧЁБА_\Лабораторные работы\КПО (Наркевич)\Лаба 4\Лаба 1\SE_Lab02.cpp
;	COMDAT ?num_in_year@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z
_TEXT	SEGMENT
$T1 = -276						; size = 4
_i$2 = -72						; size = 4
_num$ = -60						; size = 4
_i_day$ = -48						; size = 4
_c_day$ = -36						; size = 2
_i_month$ = -24						; size = 4
_c_month$ = -12						; size = 2
__$ArrayPad$ = -4					; size = 4
_str$ = 8						; size = 28
_num_of_days$ = 36					; size = 4
?num_in_year@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z PROC ; num_in_year, COMDAT

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d a8	 lea	 edi, DWORD PTR [ebp-88]
  0000f	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET __A3F7A43C_SE_Lab02@cpp
  0002a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 93   : 	char c_month[2] = { str[2], str[3] };

  0002f	6a 02		 push	 2
  00031	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  00034	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00039	8a 00		 mov	 al, BYTE PTR [eax]
  0003b	88 45 f4	 mov	 BYTE PTR _c_month$[ebp], al
  0003e	6a 03		 push	 3
  00040	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  00043	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00048	8a 00		 mov	 al, BYTE PTR [eax]
  0004a	88 45 f5	 mov	 BYTE PTR _c_month$[ebp+1], al

; 94   : 	int i_month = atoi(c_month);

  0004d	8b f4		 mov	 esi, esp
  0004f	8d 45 f4	 lea	 eax, DWORD PTR _c_month$[ebp]
  00052	50		 push	 eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00059	83 c4 04	 add	 esp, 4
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	89 45 e8	 mov	 DWORD PTR _i_month$[ebp], eax

; 95   : 	char c_day[2] = { str[0], str[1] };

  00066	6a 00		 push	 0
  00068	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  0006b	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00070	8a 00		 mov	 al, BYTE PTR [eax]
  00072	88 45 dc	 mov	 BYTE PTR _c_day$[ebp], al
  00075	6a 01		 push	 1
  00077	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  0007a	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0007f	8a 00		 mov	 al, BYTE PTR [eax]
  00081	88 45 dd	 mov	 BYTE PTR _c_day$[ebp+1], al

; 96   : 	int i_day = atoi(c_day);

  00084	8b f4		 mov	 esi, esp
  00086	8d 45 dc	 lea	 eax, DWORD PTR _c_day$[ebp]
  00089	50		 push	 eax
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00090	83 c4 04	 add	 esp, 4
  00093	3b f4		 cmp	 esi, esp
  00095	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009a	89 45 d0	 mov	 DWORD PTR _i_day$[ebp], eax

; 97   : 	int num = i_day;

  0009d	8b 45 d0	 mov	 eax, DWORD PTR _i_day$[ebp]
  000a0	89 45 c4	 mov	 DWORD PTR _num$[ebp], eax

; 98   : 	for (int i = 0; i < i_month; i++)

  000a3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  000aa	eb 09		 jmp	 SHORT $LN4@num_in_yea
$LN2@num_in_yea:
  000ac	8b 45 b8	 mov	 eax, DWORD PTR _i$2[ebp]
  000af	83 c0 01	 add	 eax, 1
  000b2	89 45 b8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@num_in_yea:
  000b5	8b 45 b8	 mov	 eax, DWORD PTR _i$2[ebp]
  000b8	3b 45 e8	 cmp	 eax, DWORD PTR _i_month$[ebp]
  000bb	7d 11		 jge	 SHORT $LN3@num_in_yea

; 99   : 	{
; 100  : 		num += num_of_days[i];

  000bd	8b 45 b8	 mov	 eax, DWORD PTR _i$2[ebp]
  000c0	8b 4d 24	 mov	 ecx, DWORD PTR _num_of_days$[ebp]
  000c3	8b 55 c4	 mov	 edx, DWORD PTR _num$[ebp]
  000c6	03 14 81	 add	 edx, DWORD PTR [ecx+eax*4]
  000c9	89 55 c4	 mov	 DWORD PTR _num$[ebp], edx

; 101  : 	}

  000cc	eb de		 jmp	 SHORT $LN2@num_in_yea
$LN3@num_in_yea:

; 102  : 	return(num);

  000ce	8b 45 c4	 mov	 eax, DWORD PTR _num$[ebp]
  000d1	89 85 ec fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  000d7	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  000da	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000df	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]

; 103  : }

  000e5	52		 push	 edx
  000e6	8b cd		 mov	 ecx, ebp
  000e8	50		 push	 eax
  000e9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@num_in_yea
  000ef	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000f4	58		 pop	 eax
  000f5	5a		 pop	 edx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fc	33 cd		 xor	 ecx, ebp
  000fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00103	81 c4 18 01 00
	00		 add	 esp, 280		; 00000118H
  00109	3b ec		 cmp	 ebp, esp
  0010b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c3		 ret	 0
$LN10@num_in_yea:
  00114	02 00 00 00	 DD	 2
  00118	00 00 00 00	 DD	 $LN9@num_in_yea
$LN9@num_in_yea:
  0011c	f4 ff ff ff	 DD	 -12			; fffffff4H
  00120	02 00 00 00	 DD	 2
  00124	00 00 00 00	 DD	 $LN7@num_in_yea
  00128	dc ff ff ff	 DD	 -36			; ffffffdcH
  0012c	02 00 00 00	 DD	 2
  00130	00 00 00 00	 DD	 $LN8@num_in_yea
$LN8@num_in_yea:
  00134	63		 DB	 99			; 00000063H
  00135	5f		 DB	 95			; 0000005fH
  00136	64		 DB	 100			; 00000064H
  00137	61		 DB	 97			; 00000061H
  00138	79		 DB	 121			; 00000079H
  00139	00		 DB	 0
$LN7@num_in_yea:
  0013a	63		 DB	 99			; 00000063H
  0013b	5f		 DB	 95			; 0000005fH
  0013c	6d		 DB	 109			; 0000006dH
  0013d	6f		 DB	 111			; 0000006fH
  0013e	6e		 DB	 110			; 0000006eH
  0013f	74		 DB	 116			; 00000074H
  00140	68		 DB	 104			; 00000068H
  00141	00		 DB	 0
?num_in_year@@YAHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z ENDP ; num_in_year
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\_УЧЁБА_\Лабораторные работы\КПО (Наркевич)\Лаба 4\Лаба 1\SE_Lab02.cpp
;	COMDAT ?def_vis_year@@YA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T1 = -261						; size = 1
$T2 = -249						; size = 1
$T3 = -237						; size = 1
$T4 = -225						; size = 1
_i_year$ = -24						; size = 4
_c_year$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_str$ = 8						; size = 28
?def_vis_year@@YA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; def_vis_year, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d b4	 lea	 edi, DWORD PTR [ebp-76]
  0000f	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET __A3F7A43C_SE_Lab02@cpp
  0002a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 68   : 	char c_year[4] = { str[4], str[5], str[6], str[7] };

  0002f	6a 04		 push	 4
  00031	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  00034	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00039	8a 00		 mov	 al, BYTE PTR [eax]
  0003b	88 45 f4	 mov	 BYTE PTR _c_year$[ebp], al
  0003e	6a 05		 push	 5
  00040	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  00043	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00048	8a 00		 mov	 al, BYTE PTR [eax]
  0004a	88 45 f5	 mov	 BYTE PTR _c_year$[ebp+1], al
  0004d	6a 06		 push	 6
  0004f	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  00052	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00057	8a 00		 mov	 al, BYTE PTR [eax]
  00059	88 45 f6	 mov	 BYTE PTR _c_year$[ebp+2], al
  0005c	6a 07		 push	 7
  0005e	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  00061	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00066	8a 00		 mov	 al, BYTE PTR [eax]
  00068	88 45 f7	 mov	 BYTE PTR _c_year$[ebp+3], al

; 69   : 	int i_year = atoi(c_year);

  0006b	8b f4		 mov	 esi, esp
  0006d	8d 45 f4	 lea	 eax, DWORD PTR _c_year$[ebp]
  00070	50		 push	 eax
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00077	83 c4 04	 add	 esp, 4
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	89 45 e8	 mov	 DWORD PTR _i_year$[ebp], eax

; 70   : 	if (i_year % 4 == 0)

  00084	8b 45 e8	 mov	 eax, DWORD PTR _i_year$[ebp]
  00087	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0008c	79 05		 jns	 SHORT $LN12@def_vis_ye
  0008e	48		 dec	 eax
  0008f	83 c8 fc	 or	 eax, -4			; fffffffcH
  00092	40		 inc	 eax
$LN12@def_vis_ye:
  00093	85 c0		 test	 eax, eax
  00095	75 67		 jne	 SHORT $LN2@def_vis_ye

; 71   : 	{
; 72   : 		if (i_year % 100 == 0)

  00097	8b 45 e8	 mov	 eax, DWORD PTR _i_year$[ebp]
  0009a	99		 cdq
  0009b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000a0	f7 f9		 idiv	 ecx
  000a2	85 d2		 test	 edx, edx
  000a4	75 3f		 jne	 SHORT $LN4@def_vis_ye

; 73   : 		{
; 74   : 			if (i_year % 400 == 0)

  000a6	8b 45 e8	 mov	 eax, DWORD PTR _i_year$[ebp]
  000a9	99		 cdq
  000aa	b9 90 01 00 00	 mov	 ecx, 400		; 00000190H
  000af	f7 f9		 idiv	 ecx
  000b1	85 d2		 test	 edx, edx
  000b3	75 19		 jne	 SHORT $LN5@def_vis_ye

; 75   : 			{
; 76   : 				return 1;

  000b5	c6 85 1f ff ff
	ff 01		 mov	 BYTE PTR $T4[ebp], 1
  000bc	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  000bf	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c4	8a 85 1f ff ff
	ff		 mov	 al, BYTE PTR $T4[ebp]
  000ca	eb 51		 jmp	 SHORT $LN1@def_vis_ye

; 77   : 			}

  000cc	eb 17		 jmp	 SHORT $LN4@def_vis_ye
$LN5@def_vis_ye:

; 78   : 			else
; 79   : 			{
; 80   : 				return 0;

  000ce	c6 85 13 ff ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
  000d5	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  000d8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000dd	8a 85 13 ff ff
	ff		 mov	 al, BYTE PTR $T3[ebp]
  000e3	eb 38		 jmp	 SHORT $LN1@def_vis_ye
$LN4@def_vis_ye:

; 81   : 			}
; 82   : 		}
; 83   : 		return 1;

  000e5	c6 85 07 ff ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
  000ec	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  000ef	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f4	8a 85 07 ff ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
  000fa	eb 21		 jmp	 SHORT $LN1@def_vis_ye

; 84   : 	}

  000fc	eb 17		 jmp	 SHORT $LN3@def_vis_ye
$LN2@def_vis_ye:

; 85   : 	else
; 86   : 	{
; 87   : 		return 0;

  000fe	c6 85 fb fe ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  00105	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  00108	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0010d	8a 85 fb fe ff
	ff		 mov	 al, BYTE PTR $T1[ebp]
  00113	eb 08		 jmp	 SHORT $LN1@def_vis_ye
$LN3@def_vis_ye:

; 88   : 	}
; 89   : }

  00115	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  00118	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@def_vis_ye:
  0011d	52		 push	 edx
  0011e	8b cd		 mov	 ecx, ebp
  00120	50		 push	 eax
  00121	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@def_vis_ye
  00127	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0012c	58		 pop	 eax
  0012d	5a		 pop	 edx
  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi
  00130	5b		 pop	 ebx
  00131	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00134	33 cd		 xor	 ecx, ebp
  00136	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013b	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  00141	3b ec		 cmp	 ebp, esp
  00143	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c3		 ret	 0
$LN11@def_vis_ye:
  0014c	01 00 00 00	 DD	 1
  00150	00 00 00 00	 DD	 $LN10@def_vis_ye
$LN10@def_vis_ye:
  00154	f4 ff ff ff	 DD	 -12			; fffffff4H
  00158	04 00 00 00	 DD	 4
  0015c	00 00 00 00	 DD	 $LN9@def_vis_ye
$LN9@def_vis_ye:
  00160	63		 DB	 99			; 00000063H
  00161	5f		 DB	 95			; 0000005fH
  00162	79		 DB	 121			; 00000079H
  00163	65		 DB	 101			; 00000065H
  00164	61		 DB	 97			; 00000061H
  00165	72		 DB	 114			; 00000072H
  00166	00		 DB	 0
?def_vis_year@@YA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; def_vis_year
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4996 :     basic_ostream<_Elem, _Traits>& _Ostr, const basic_string<_Elem, _Traits, _Alloc>& _Str) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4997 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00024	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00029	50		 push	 eax
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0002d	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  00032	50		 push	 eax
  00033	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4998 : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\_УЧЁБА_\Лабораторные работы\КПО (Наркевич)\Лаба 4\Лаба 1\SE_Lab02.cpp
;	COMDAT ?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z
_TEXT	SEGMENT
tv159 = -312						; size = 4
tv161 = -308						; size = 4
$T2 = -300						; size = 28
_i_day$ = -72						; size = 4
_c_day$ = -60						; size = 2
_i_month$ = -48						; size = 4
_c_month$ = -36						; size = 2
_i$3 = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_str$ = 8						; size = 28
_num_of_days$ = 36					; size = 4
?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z PROC ; inc_input_check, COMDAT

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d 7d 88	 lea	 edi, DWORD PTR [ebp-120]
  0001d	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __A3F7A43C_SE_Lab02@cpp
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 36   : 	if (str.length() != 8)

  0004e	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  00051	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  00056	83 f8 08	 cmp	 eax, 8
  00059	74 24		 je	 SHORT $LN5@inc_input_

; 37   : 	{
; 38   : 		cout << "Invalid length";

  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JPMAMPOL@Invalid?5length@
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0006b	83 c4 08	 add	 esp, 8

; 39   : 		exit(14);

  0006e	8b f4		 mov	 esi, esp
  00070	6a 0e		 push	 14			; 0000000eH
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  00078	3b f4		 cmp	 esi, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@inc_input_:

; 40   : 	}
; 41   : 	for (int i = 0; i < 8; i++)

  0007f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  00086	eb 09		 jmp	 SHORT $LN4@inc_input_
$LN2@inc_input_:
  00088	8b 45 e8	 mov	 eax, DWORD PTR _i$3[ebp]
  0008b	83 c0 01	 add	 eax, 1
  0008e	89 45 e8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@inc_input_:
  00091	83 7d e8 08	 cmp	 DWORD PTR _i$3[ebp], 8
  00095	7d 4e		 jge	 SHORT $LN3@inc_input_

; 42   : 	{
; 43   : 		if ((str[i] < '0') || (str[i] > '9'))

  00097	8b 45 e8	 mov	 eax, DWORD PTR _i$3[ebp]
  0009a	50		 push	 eax
  0009b	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  0009e	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  000a3	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000a6	83 f9 30	 cmp	 ecx, 48			; 00000030H
  000a9	7c 14		 jl	 SHORT $LN7@inc_input_
  000ab	8b 45 e8	 mov	 eax, DWORD PTR _i$3[ebp]
  000ae	50		 push	 eax
  000af	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  000b2	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  000b7	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000ba	83 f9 39	 cmp	 ecx, 57			; 00000039H
  000bd	7e 24		 jle	 SHORT $LN6@inc_input_
$LN7@inc_input_:

; 44   : 		{
; 45   : 			cout << "Enter only digits";

  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GKNOMECO@Enter?5only?5digits@
  000c4	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000cf	83 c4 08	 add	 esp, 8

; 46   : 			exit(15);

  000d2	8b f4		 mov	 esi, esp
  000d4	6a 0f		 push	 15			; 0000000fH
  000d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  000dc	3b f4		 cmp	 esi, esp
  000de	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@inc_input_:

; 47   : 		}
; 48   : 	}

  000e3	eb a3		 jmp	 SHORT $LN2@inc_input_
$LN3@inc_input_:

; 49   : 	char c_month[2] = { str[2], str[3] };

  000e5	6a 02		 push	 2
  000e7	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  000ea	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  000ef	8a 00		 mov	 al, BYTE PTR [eax]
  000f1	88 45 dc	 mov	 BYTE PTR _c_month$[ebp], al
  000f4	6a 03		 push	 3
  000f6	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  000f9	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  000fe	8a 00		 mov	 al, BYTE PTR [eax]
  00100	88 45 dd	 mov	 BYTE PTR _c_month$[ebp+1], al

; 50   : 	int i_month = atoi(c_month);

  00103	8b f4		 mov	 esi, esp
  00105	8d 45 dc	 lea	 eax, DWORD PTR _c_month$[ebp]
  00108	50		 push	 eax
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0010f	83 c4 04	 add	 esp, 4
  00112	3b f4		 cmp	 esi, esp
  00114	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00119	89 45 d0	 mov	 DWORD PTR _i_month$[ebp], eax

; 51   : 	if ((i_month == 0) || (i_month > 12))

  0011c	83 7d d0 00	 cmp	 DWORD PTR _i_month$[ebp], 0
  00120	74 06		 je	 SHORT $LN9@inc_input_
  00122	83 7d d0 0c	 cmp	 DWORD PTR _i_month$[ebp], 12 ; 0000000cH
  00126	7e 24		 jle	 SHORT $LN8@inc_input_
$LN9@inc_input_:

; 52   : 	{
; 53   : 		cout << "Invalid month\n";

  00128	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JIHHEMHJ@Invalid?5month?6@
  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00138	83 c4 08	 add	 esp, 8

; 54   : 		exit(16);

  0013b	8b f4		 mov	 esi, esp
  0013d	6a 10		 push	 16			; 00000010H
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  00145	3b f4		 cmp	 esi, esp
  00147	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN8@inc_input_:

; 55   : 	}
; 56   : 	cout << string_month(i_month) << endl;

  0014c	8b f4		 mov	 esi, esp
  0014e	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00153	8b 45 d0	 mov	 eax, DWORD PTR _i_month$[ebp]
  00156	50		 push	 eax
  00157	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0015d	51		 push	 ecx
  0015e	e8 00 00 00 00	 call	 ?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; string_month
  00163	83 c4 08	 add	 esp, 8
  00166	89 85 cc fe ff
	ff		 mov	 DWORD PTR tv161[ebp], eax
  0016c	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR tv161[ebp]
  00172	89 95 c8 fe ff
	ff		 mov	 DWORD PTR tv159[ebp], edx
  00178	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0017c	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR tv159[ebp]
  00182	50		 push	 eax
  00183	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00189	51		 push	 ecx
  0018a	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0018f	83 c4 08	 add	 esp, 8
  00192	8b c8		 mov	 ecx, eax
  00194	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0019a	3b f4		 cmp	 esi, esp
  0019c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001a5	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  001ab	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 57   : 	char c_day[2] = { str[0], str[1] };

  001b0	6a 00		 push	 0
  001b2	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  001b5	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  001ba	8a 00		 mov	 al, BYTE PTR [eax]
  001bc	88 45 c4	 mov	 BYTE PTR _c_day$[ebp], al
  001bf	6a 01		 push	 1
  001c1	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  001c4	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  001c9	8a 00		 mov	 al, BYTE PTR [eax]
  001cb	88 45 c5	 mov	 BYTE PTR _c_day$[ebp+1], al

; 58   : 	int i_day = atoi(c_day);

  001ce	8b f4		 mov	 esi, esp
  001d0	8d 45 c4	 lea	 eax, DWORD PTR _c_day$[ebp]
  001d3	50		 push	 eax
  001d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  001da	83 c4 04	 add	 esp, 4
  001dd	3b f4		 cmp	 esi, esp
  001df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e4	89 45 b8	 mov	 DWORD PTR _i_day$[ebp], eax

; 59   : 	if ((i_day == 0) || (i_day > num_of_days[i_month]))

  001e7	83 7d b8 00	 cmp	 DWORD PTR _i_day$[ebp], 0
  001eb	74 0e		 je	 SHORT $LN11@inc_input_
  001ed	8b 45 d0	 mov	 eax, DWORD PTR _i_month$[ebp]
  001f0	8b 4d 24	 mov	 ecx, DWORD PTR _num_of_days$[ebp]
  001f3	8b 55 b8	 mov	 edx, DWORD PTR _i_day$[ebp]
  001f6	3b 14 81	 cmp	 edx, DWORD PTR [ecx+eax*4]
  001f9	7e 24		 jle	 SHORT $LN10@inc_input_
$LN11@inc_input_:

; 60   : 	{
; 61   : 		cout << "Invalid day\n";

  001fb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GAADDEII@Invalid?5day?6@
  00200	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0020b	83 c4 08	 add	 esp, 8

; 62   : 		exit(17);

  0020e	8b f4		 mov	 esi, esp
  00210	6a 11		 push	 17			; 00000011H
  00212	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  00218	3b f4		 cmp	 esi, esp
  0021a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN10@inc_input_:

; 63   : 	}
; 64   : }

  0021f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00226	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  00229	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN12@inc_input_:
  0022e	52		 push	 edx
  0022f	8b cd		 mov	 ecx, ebp
  00231	50		 push	 eax
  00232	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN19@inc_input_
  00238	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0023d	58		 pop	 eax
  0023e	5a		 pop	 edx
  0023f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00242	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00249	59		 pop	 ecx
  0024a	5f		 pop	 edi
  0024b	5e		 pop	 esi
  0024c	5b		 pop	 ebx
  0024d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00250	33 cd		 xor	 ecx, ebp
  00252	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00257	81 c4 38 01 00
	00		 add	 esp, 312		; 00000138H
  0025d	3b ec		 cmp	 ebp, esp
  0025f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00264	8b e5		 mov	 esp, ebp
  00266	5d		 pop	 ebp
  00267	c3		 ret	 0
$LN19@inc_input_:
  00268	02 00 00 00	 DD	 2
  0026c	00 00 00 00	 DD	 $LN18@inc_input_
$LN18@inc_input_:
  00270	dc ff ff ff	 DD	 -36			; ffffffdcH
  00274	02 00 00 00	 DD	 2
  00278	00 00 00 00	 DD	 $LN15@inc_input_
  0027c	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00280	02 00 00 00	 DD	 2
  00284	00 00 00 00	 DD	 $LN16@inc_input_
$LN16@inc_input_:
  00288	63		 DB	 99			; 00000063H
  00289	5f		 DB	 95			; 0000005fH
  0028a	64		 DB	 100			; 00000064H
  0028b	61		 DB	 97			; 00000061H
  0028c	79		 DB	 121			; 00000079H
  0028d	00		 DB	 0
$LN15@inc_input_:
  0028e	63		 DB	 99			; 00000063H
  0028f	5f		 DB	 95			; 0000005fH
  00290	6d		 DB	 109			; 0000006dH
  00291	6f		 DB	 111			; 0000006fH
  00292	6e		 DB	 110			; 0000006eH
  00293	74		 DB	 116			; 00000074H
  00294	68		 DB	 104			; 00000068H
  00295	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z$1:
  00008	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 8a c4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-316]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?inc_input_check@@YAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAH@Z ENDP ; inc_input_check
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\_УЧЁБА_\Лабораторные работы\КПО (Наркевич)\Лаба 4\Лаба 1\SE_Lab02.cpp
;	COMDAT ?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
_TEXT	SEGMENT
$T2 = -560						; size = 4
_mas_of_months$ = -356					; size = 336
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_i_month$ = 12						; size = 4
?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z PROC ; string_month, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 28 02 00
	00		 sub	 esp, 552		; 00000228H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 8c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-372]
  00020	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	c7 85 d0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0004a	b9 00 00 00 00	 mov	 ecx, OFFSET __A3F7A43C_SE_Lab02@cpp
  0004f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 29   : 	string mas_of_months[12] = { "January", "February", "March", "April", "May", "June", 

  00054	68 00 00 00 00	 push	 OFFSET ??_C@_07CGJPFGJA@January@
  00059	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp]
  0005f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00064	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_08GNJGEPFN@February@
  00070	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+28]
  00076	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0007b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_05HPCKOFNC@March@
  00084	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+56]
  0008a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0008f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_05DMJDNLEJ@April@
  00098	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+84]
  0009e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000a3	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_03CNMDKL@May@
  000ac	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+112]
  000b2	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b7	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_04CNLMGBGM@June@
  000c0	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+140]
  000c6	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000cb	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 30   : 								 "July", "August", "September", "October", "November", "December" };

  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_04MIEPOIFP@July@
  000d4	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+168]
  000da	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000df	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_06LBBHFDDG@August@
  000e8	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+196]
  000ee	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f3	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_09BHHEALKD@September@
  000fc	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+224]
  00102	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00107	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_07JJNFCEND@October@
  00110	8d 4d 98	 lea	 ecx, DWORD PTR _mas_of_months$[ebp+252]
  00113	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00118	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_08HCHEGEOA@November@
  00121	8d 4d b4	 lea	 ecx, DWORD PTR _mas_of_months$[ebp+280]
  00124	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00129	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_08EDHMEBNP@December@
  00132	8d 4d d0	 lea	 ecx, DWORD PTR _mas_of_months$[ebp+308]
  00135	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 29   : 	string mas_of_months[12] = { "January", "February", "March", "April", "May", "June", 

  0013a	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 12 ; 0000000cH

; 31   : 	return mas_of_months[i_month-1];

  00141	8b 45 0c	 mov	 eax, DWORD PTR _i_month$[ebp]
  00144	83 e8 01	 sub	 eax, 1
  00147	6b c8 1c	 imul	 ecx, eax, 28
  0014a	8d 94 0d 9c fe
	ff ff		 lea	 edx, DWORD PTR _mas_of_months$[ebp+ecx]
  00151	52		 push	 edx
  00152	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00155	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0015a	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00160	83 c8 01	 or	 eax, 1
  00163	89 85 d0 fd ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00169	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0016d	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00172	6a 0c		 push	 12			; 0000000cH
  00174	6a 1c		 push	 28			; 0000001cH
  00176	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp]
  0017c	51		 push	 ecx
  0017d	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00182	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 32   : }

  00185	52		 push	 edx
  00186	8b cd		 mov	 ecx, ebp
  00188	50		 push	 eax
  00189	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN21@string_mon
  0018f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00194	58		 pop	 eax
  00195	5a		 pop	 edx
  00196	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00199	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a0	59		 pop	 ecx
  001a1	5f		 pop	 edi
  001a2	5e		 pop	 esi
  001a3	5b		 pop	 ebx
  001a4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a7	33 cd		 xor	 ecx, ebp
  001a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ae	81 c4 34 02 00
	00		 add	 esp, 564		; 00000234H
  001b4	3b ec		 cmp	 ebp, esp
  001b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c3		 ret	 0
  001bf	90		 npad	 1
$LN21@string_mon:
  001c0	01 00 00 00	 DD	 1
  001c4	00 00 00 00	 DD	 $LN20@string_mon
$LN20@string_mon:
  001c8	9c fe ff ff	 DD	 -356			; fffffe9cH
  001cc	50 01 00 00	 DD	 336			; 00000150H
  001d0	00 00 00 00	 DD	 $LN18@string_mon
$LN18@string_mon:
  001d4	6d		 DB	 109			; 0000006dH
  001d5	61		 DB	 97			; 00000061H
  001d6	73		 DB	 115			; 00000073H
  001d7	5f		 DB	 95			; 0000005fH
  001d8	6f		 DB	 111			; 0000006fH
  001d9	66		 DB	 102			; 00000066H
  001da	5f		 DB	 95			; 0000005fH
  001db	6d		 DB	 109			; 0000006dH
  001dc	6f		 DB	 111			; 0000006fH
  001dd	6e		 DB	 110			; 0000006eH
  001de	74		 DB	 116			; 00000074H
  001df	68		 DB	 104			; 00000068H
  001e0	73		 DB	 115			; 00000073H
  001e1	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$0:
  00000	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$1:
  0000b	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+28]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$2:
  00016	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+56]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$3:
  00021	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+84]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$4:
  0002c	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+112]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$5:
  00037	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+140]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$6:
  00042	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+168]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$7:
  0004d	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+196]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$8:
  00058	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _mas_of_months$[ebp+224]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$9:
  00063	8d 4d 98	 lea	 ecx, DWORD PTR _mas_of_months$[ebp+252]
  00066	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$10:
  0006b	8d 4d b4	 lea	 ecx, DWORD PTR _mas_of_months$[ebp+280]
  0006e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$12:
  00073	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00078	6a 0c		 push	 12			; 0000000cH
  0007a	6a 1c		 push	 28			; 0000001cH
  0007c	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _mas_of_months$[ebp]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00088	c3		 ret	 0
__unwindfunclet$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$13:
  00089	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0008f	83 e0 01	 and	 eax, 1
  00092	0f 84 0f 00 00
	00		 je	 $LN17@string_mon
  00098	83 a5 d0 fd ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000a2	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN17@string_mon:
  000a7	c3		 ret	 0
  000a8	cc		 int	 3
  000a9	cc		 int	 3
  000aa	cc		 int	 3
  000ab	cc		 int	 3
  000ac	cc		 int	 3
__ehhandler$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z:
  000ad	90		 npad	 1
  000ae	90		 npad	 1
  000af	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000b3	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000b6	8b 8a c8 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-568]
  000bc	33 c8		 xor	 ecx, eax
  000be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c3	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000c6	33 c8		 xor	 ecx, eax
  000c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cd	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
  000d2	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?string_month@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ENDP ; string_month
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 1001 :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1002 :     _Ostr.put(_Ostr.widen('\n'));

  00021	8b f4		 mov	 esi, esp
  00023	6a 0a		 push	 10			; 0000000aH
  00025	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0002d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00030	8b ca		 mov	 ecx, edx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b f4		 mov	 esi, esp
  00041	0f b6 c0	 movzx	 eax, al
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1003 :     _Ostr.flush();

  00055	8b f4		 mov	 esi, esp
  00057	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1004 :     return _Ostr;

  00067	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 1005 : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
_TEXT	SEGMENT
tv128 = -356						; size = 8
tv280 = -352						; size = 4
tv275 = -352						; size = 4
tv314 = -348						; size = 8
tv279 = -348						; size = 4
tv277 = -348						; size = 4
tv274 = -348						; size = 4
tv276 = -344						; size = 4
tv65 = -344						; size = 4
tv278 = -341						; size = 1
tv273 = -341						; size = 1
$T2 = -336						; size = 4
$T3 = -324						; size = 4
$T4 = -312						; size = 4
$T5 = -300						; size = 4
$T6 = -288						; size = 4
$T7 = -276						; size = 4
$T8 = -264						; size = 4
__Pad$9 = -60						; size = 8
__Ok$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Ch$ = 12						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 802  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, char _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00021	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 803  :     // insert a char into char stream
; 804  :     using _Elem = char;
; 805  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 806  : 
; 807  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 808  :     const typename _Myos::sentry _Ok(_Ostr);

  00055	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00058	50		 push	 eax
  00059	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0005c	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 809  : 
; 810  :     if (_Ok) { // state okay, insert

  00068	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0006b	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00070	0f b6 c0	 movzx	 eax, al
  00073	85 c0		 test	 eax, eax
  00075	0f 84 3a 03 00
	00		 je	 $LN8@operator

; 811  :         streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  0007b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00083	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00086	8b f4		 mov	 esi, esp
  00088	8b ca		 mov	 ecx, edx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00090	3b f4		 cmp	 esi, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv314[ebp], eax
  0009d	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv314[ebp+4], edx
  000a3	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR tv314[ebp+4], 0
  000aa	7f 18		 jg	 SHORT $LN15@operator
  000ac	7c 09		 jl	 SHORT $LN22@operator
  000ae	83 bd a4 fe ff
	ff 01		 cmp	 DWORD PTR tv314[ebp], 1
  000b5	77 0d		 ja	 SHORT $LN15@operator
$LN22@operator:
  000b7	0f 57 c0	 xorps	 xmm0, xmm0
  000ba	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv128[ebp], xmm0
  000c2	eb 2e		 jmp	 SHORT $LN16@operator
$LN15@operator:
  000c4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000cc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000cf	8b f4		 mov	 esi, esp
  000d1	8b ca		 mov	 ecx, edx
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000d9	3b f4		 cmp	 esi, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	83 e8 01	 sub	 eax, 1
  000e3	83 da 00	 sbb	 edx, 0
  000e6	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv128[ebp], eax
  000ec	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv128[ebp+4], edx
$LN16@operator:
  000f2	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv128[ebp]
  000f8	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv128[ebp+4]
  000fe	89 45 c4	 mov	 DWORD PTR __Pad$9[ebp], eax
  00101	89 4d c8	 mov	 DWORD PTR __Pad$9[ebp+4], ecx

; 812  : 
; 813  :         _TRY_IO_BEGIN

  00104	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 814  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00108	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0010b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00110	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00113	8b f4		 mov	 esi, esp
  00115	8b ca		 mov	 ecx, edx
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0011d	3b f4		 cmp	 esi, esp
  0011f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00124	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  0012a	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  00130	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00135	83 f8 40	 cmp	 eax, 64			; 00000040H
  00138	0f 84 dd 00 00
	00		 je	 $LN10@operator

; 815  :             for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on left

  0013e	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00140	8b 45 c4	 mov	 eax, DWORD PTR __Pad$9[ebp]
  00143	83 e8 01	 sub	 eax, 1
  00146	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$9[ebp+4]
  00149	83 d9 00	 sbb	 ecx, 0
  0014c	89 45 c4	 mov	 DWORD PTR __Pad$9[ebp], eax
  0014f	89 4d c8	 mov	 DWORD PTR __Pad$9[ebp+4], ecx
$LN4@operator:
  00152	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00156	0f 85 bf 00 00
	00		 jne	 $LN10@operator
  0015c	83 7d c8 00	 cmp	 DWORD PTR __Pad$9[ebp+4], 0
  00160	0f 8c b5 00 00
	00		 jl	 $LN10@operator
  00166	7f 0a		 jg	 SHORT $LN23@operator
  00168	83 7d c4 00	 cmp	 DWORD PTR __Pad$9[ebp], 0
  0016c	0f 86 a9 00 00
	00		 jbe	 $LN10@operator
$LN23@operator:

; 816  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00172	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00175	8b 08		 mov	 ecx, DWORD PTR [eax]
  00177	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0017a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0017d	8b f4		 mov	 esi, esp
  0017f	8b ca		 mov	 ecx, edx
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00187	3b f4		 cmp	 esi, esp
  00189	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018e	88 85 ab fe ff
	ff		 mov	 BYTE PTR tv273[ebp], al
  00194	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00197	8b 08		 mov	 ecx, DWORD PTR [eax]
  00199	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0019c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0019f	8b f4		 mov	 esi, esp
  001a1	8b ca		 mov	 ecx, edx
  001a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001a9	3b f4		 cmp	 esi, esp
  001ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b0	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv274[ebp], eax
  001b6	8b f4		 mov	 esi, esp
  001b8	0f b6 85 ab fe
	ff ff		 movzx	 eax, BYTE PTR tv273[ebp]
  001bf	50		 push	 eax
  001c0	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv274[ebp]
  001c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  001cc	3b f4		 cmp	 esi, esp
  001ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d3	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv275[ebp], eax
  001d9	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv275[ebp]
  001df	89 8d f8 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], ecx
  001e5	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001ea	89 85 ec fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  001f0	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR $T8[ebp]
  001f6	52		 push	 edx
  001f7	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  001fd	50		 push	 eax
  001fe	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00203	83 c4 08	 add	 esp, 8
  00206	0f b6 c8	 movzx	 ecx, al
  00209	85 c9		 test	 ecx, ecx
  0020b	74 09		 je	 SHORT $LN11@operator

; 817  :                     _State |= ios_base::badbit;

  0020d	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00210	83 c8 04	 or	 eax, 4
  00213	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN11@operator:

; 818  :                 }
; 819  :             }

  00216	e9 25 ff ff ff	 jmp	 $LN2@operator
$LN10@operator:

; 820  :         }
; 821  : 
; 822  :         if (_State == ios_base::goodbit && _Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ch))) {

  0021b	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  0021f	75 7f		 jne	 SHORT $LN12@operator
  00221	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00224	8b 08		 mov	 ecx, DWORD PTR [eax]
  00226	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00229	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0022c	8b f4		 mov	 esi, esp
  0022e	8b ca		 mov	 ecx, edx
  00230	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00236	3b f4		 cmp	 esi, esp
  00238	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023d	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv276[ebp], eax
  00243	8b f4		 mov	 esi, esp
  00245	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00249	50		 push	 eax
  0024a	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv276[ebp]
  00250	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00256	3b f4		 cmp	 esi, esp
  00258	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0025d	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv277[ebp], eax
  00263	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv277[ebp]
  00269	89 8d e0 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  0026f	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00274	89 85 d4 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  0027a	8d 95 e0 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00280	52		 push	 edx
  00281	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00287	50		 push	 eax
  00288	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0028d	83 c4 08	 add	 esp, 8
  00290	0f b6 c8	 movzx	 ecx, al
  00293	85 c9		 test	 ecx, ecx
  00295	74 09		 je	 SHORT $LN12@operator

; 823  :             _State |= ios_base::badbit;

  00297	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0029a	83 c8 04	 or	 eax, 4
  0029d	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN12@operator:

; 824  :         }
; 825  : 
; 826  :         for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on right

  002a0	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002a2	8b 45 c4	 mov	 eax, DWORD PTR __Pad$9[ebp]
  002a5	83 e8 01	 sub	 eax, 1
  002a8	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$9[ebp+4]
  002ab	83 d9 00	 sbb	 ecx, 0
  002ae	89 45 c4	 mov	 DWORD PTR __Pad$9[ebp], eax
  002b1	89 4d c8	 mov	 DWORD PTR __Pad$9[ebp+4], ecx
$LN7@operator:
  002b4	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002b8	0f 85 bf 00 00
	00		 jne	 $LN6@operator
  002be	83 7d c8 00	 cmp	 DWORD PTR __Pad$9[ebp+4], 0
  002c2	0f 8c b5 00 00
	00		 jl	 $LN6@operator
  002c8	7f 0a		 jg	 SHORT $LN24@operator
  002ca	83 7d c4 00	 cmp	 DWORD PTR __Pad$9[ebp], 0
  002ce	0f 86 a9 00 00
	00		 jbe	 $LN6@operator
$LN24@operator:

; 827  :             if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002d4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002dc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002df	8b f4		 mov	 esi, esp
  002e1	8b ca		 mov	 ecx, edx
  002e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002e9	3b f4		 cmp	 esi, esp
  002eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f0	88 85 ab fe ff
	ff		 mov	 BYTE PTR tv278[ebp], al
  002f6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002fb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002fe	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00301	8b f4		 mov	 esi, esp
  00303	8b ca		 mov	 ecx, edx
  00305	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0030b	3b f4		 cmp	 esi, esp
  0030d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00312	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv279[ebp], eax
  00318	8b f4		 mov	 esi, esp
  0031a	0f b6 85 ab fe
	ff ff		 movzx	 eax, BYTE PTR tv278[ebp]
  00321	50		 push	 eax
  00322	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv279[ebp]
  00328	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0032e	3b f4		 cmp	 esi, esp
  00330	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00335	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv280[ebp], eax
  0033b	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv280[ebp]
  00341	89 8d c8 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00347	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0034c	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00352	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00358	52		 push	 edx
  00359	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00365	83 c4 08	 add	 esp, 8
  00368	0f b6 c8	 movzx	 ecx, al
  0036b	85 c9		 test	 ecx, ecx
  0036d	74 09		 je	 SHORT $LN13@operator

; 828  :                 _State |= ios_base::badbit;

  0036f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00372	83 c8 04	 or	 eax, 4
  00375	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 829  :             }
; 830  :         }

  00378	e9 25 ff ff ff	 jmp	 $LN5@operator
$LN6@operator:
  0037d	eb 26		 jmp	 SHORT $LN17@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0:

; 831  :         _CATCH_IO_(ios_base, _Ostr)

  0037f	8b f4		 mov	 esi, esp
  00381	6a 01		 push	 1
  00383	6a 04		 push	 4
  00385	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00388	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0038d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00390	8b ca		 mov	 ecx, edx
  00392	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00398	3b f4		 cmp	 esi, esp
  0039a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0039f	b8 00 00 00 00	 mov	 eax, $LN21@operator
  003a4	c3		 ret	 0
$LN17@operator:
  003a5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  003ac	eb 07		 jmp	 SHORT $LN8@operator
$LN21@operator:
  003ae	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN8@operator:

; 832  :     }
; 833  : 
; 834  :     _Ostr.width(0);

  003b5	8b f4		 mov	 esi, esp
  003b7	6a 00		 push	 0
  003b9	6a 00		 push	 0
  003bb	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003be	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003c3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003c6	8b ca		 mov	 ecx, edx
  003c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003ce	3b f4		 cmp	 esi, esp
  003d0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 835  :     _Ostr.setstate(_State);

  003d5	8b f4		 mov	 esi, esp
  003d7	6a 00		 push	 0
  003d9	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003dc	50		 push	 eax
  003dd	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003e0	8b 11		 mov	 edx, DWORD PTR [ecx]
  003e2	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003e5	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003ee	3b f4		 cmp	 esi, esp
  003f0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 836  :     return _Ostr;

  003f5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003f8	89 85 b0 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003fe	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00405	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00408	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0040d	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 837  : }

  00413	52		 push	 edx
  00414	8b cd		 mov	 ecx, ebp
  00416	50		 push	 eax
  00417	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@operator
  0041d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00422	58		 pop	 eax
  00423	5a		 pop	 edx
  00424	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00427	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0042e	59		 pop	 ecx
  0042f	5f		 pop	 edi
  00430	5e		 pop	 esi
  00431	5b		 pop	 ebx
  00432	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00435	33 cd		 xor	 ecx, ebp
  00437	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0043c	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00442	3b ec		 cmp	 ebp, esp
  00444	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00449	8b e5		 mov	 esp, ebp
  0044b	5d		 pop	 ebp
  0044c	c3		 ret	 0
  0044d	0f 1f 00	 npad	 3
$LN28@operator:
  00450	01 00 00 00	 DD	 1
  00454	00 00 00 00	 DD	 $LN27@operator
$LN27@operator:
  00458	d4 ff ff ff	 DD	 -44			; ffffffd4H
  0045c	08 00 00 00	 DD	 8
  00460	00 00 00 00	 DD	 $LN25@operator
$LN25@operator:
  00464	5f		 DB	 95			; 0000005fH
  00465	4f		 DB	 79			; 0000004fH
  00466	6b		 DB	 107			; 0000006bH
  00467	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv343 = -348						; size = 8
tv291 = -344						; size = 4
tv288 = -344						; size = 8
tv286 = -344						; size = 4
tv329 = -340						; size = 8
tv290 = -340						; size = 4
tv285 = -340						; size = 4
tv287 = -336						; size = 4
tv137 = -336						; size = 4
tv289 = -333						; size = 1
tv284 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 757  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-164]
  00021	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __033B95B1_ostream
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 758  :     // insert NTBS into char stream
; 759  :     using _Elem = char;
; 760  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 761  : 
; 762  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 763  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00055	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  0005e	83 c4 04	 add	 esp, 4
  00061	33 c9		 xor	 ecx, ecx
  00063	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00066	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 764  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00069	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00071	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00074	8b f4		 mov	 esi, esp
  00076	8b ca		 mov	 ecx, edx
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv329[ebp], eax
  0008b	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv329[ebp+4], edx
  00091	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp+4], 0
  00098	7c 79		 jl	 SHORT $LN17@operator
  0009a	7f 09		 jg	 SHORT $LN24@operator
  0009c	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp], 0
  000a3	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  000a5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ad	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b0	8b f4		 mov	 esi, esp
  000b2	8b ca		 mov	 ecx, edx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv343[ebp], eax
  000c7	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv343[ebp+4], edx
  000cd	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv343[ebp+4]
  000d3	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000d6	7c 3b		 jl	 SHORT $LN17@operator
  000d8	7f 0b		 jg	 SHORT $LN25@operator
  000da	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv343[ebp]
  000e0	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000e3	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000e8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000ed	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000f0	8b f4		 mov	 esi, esp
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  00102	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  00105	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  0010b	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00111	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00113	0f 57 c0	 xorps	 xmm0, xmm0
  00116	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  0011e	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00124	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  0012a	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  0012d	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 765  :     const typename _Myos::sentry _Ok(_Ostr);

  00130	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00133	50		 push	 eax
  00134	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00137	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0013c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 766  : 
; 767  :     if (!_Ok) {

  00143	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00146	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0014b	0f b6 c0	 movzx	 eax, al
  0014e	85 c0		 test	 eax, eax
  00150	75 0e		 jne	 SHORT $LN8@operator

; 768  :         _State |= ios_base::badbit;

  00152	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00155	83 c8 04	 or	 eax, 4
  00158	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 769  :     } else { // state okay, insert

  0015b	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 770  :         _TRY_IO_BEGIN

  00160	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 771  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00164	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00167	8b 08		 mov	 ecx, DWORD PTR [eax]
  00169	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0016c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0016f	8b f4		 mov	 esi, esp
  00171	8b ca		 mov	 ecx, edx
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00179	3b f4		 cmp	 esi, esp
  0017b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00180	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00186	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  0018c	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00191	83 f8 40	 cmp	 eax, 64			; 00000040H
  00194	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 772  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0019a	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0019c	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  0019f	83 e8 01	 sub	 eax, 1
  001a2	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  001a5	83 d9 00	 sbb	 ecx, 0
  001a8	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  001ab	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001ae	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001b2	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001b8	7f 0a		 jg	 SHORT $LN26@operator
  001ba	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001be	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 773  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001c4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001cc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001cf	8b f4		 mov	 esi, esp
  001d1	8b ca		 mov	 ecx, edx
  001d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001d9	3b f4		 cmp	 esi, esp
  001db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e0	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv284[ebp], al
  001e6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001eb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001f1	8b f4		 mov	 esi, esp
  001f3	8b ca		 mov	 ecx, edx
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001fb	3b f4		 cmp	 esi, esp
  001fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00202	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00208	8b f4		 mov	 esi, esp
  0020a	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv284[ebp]
  00211	50		 push	 eax
  00212	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00218	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0021e	3b f4		 cmp	 esi, esp
  00220	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00225	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0022b	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  00231	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00237	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0023c	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00242	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00248	52		 push	 edx
  00249	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0024f	50		 push	 eax
  00250	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00255	83 c4 08	 add	 esp, 8
  00258	0f b6 c8	 movzx	 ecx, al
  0025b	85 c9		 test	 ecx, ecx
  0025d	74 0b		 je	 SHORT $LN12@operator

; 774  :                     _State |= ios_base::badbit; // insertion failed, quit

  0025f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00262	83 c8 04	 or	 eax, 4
  00265	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 775  :                     break;

  00268	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 776  :                 }
; 777  :             }

  0026a	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 778  :         }
; 779  : 
; 780  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0026f	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00273	75 6e		 jne	 SHORT $LN13@operator
  00275	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00278	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0027d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00280	8b f4		 mov	 esi, esp
  00282	8b ca		 mov	 ecx, edx
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0028a	3b f4		 cmp	 esi, esp
  0028c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00291	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  00297	8b f4		 mov	 esi, esp
  00299	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0029c	50		 push	 eax
  0029d	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  002a0	51		 push	 ecx
  002a1	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  002a4	52		 push	 edx
  002a5	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp]
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002b1	3b f4		 cmp	 esi, esp
  002b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b8	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv288[ebp], eax
  002be	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv288[ebp+4], edx
  002c4	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  002ca	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  002cd	75 0b		 jne	 SHORT $LN27@operator
  002cf	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv288[ebp+4]
  002d5	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002d8	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 781  :             _State |= ios_base::badbit;

  002da	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002dd	83 c8 04	 or	 eax, 4
  002e0	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 782  :         }
; 783  : 
; 784  :         if (_State == ios_base::goodbit) {

  002e3	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002e7	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 785  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002ed	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002ef	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002f2	83 e8 01	 sub	 eax, 1
  002f5	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002f8	83 d9 00	 sbb	 ecx, 0
  002fb	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002fe	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  00301	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00305	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  0030b	7f 0a		 jg	 SHORT $LN28@operator
  0030d	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00311	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 786  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00317	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0031a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0031f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00322	8b f4		 mov	 esi, esp
  00324	8b ca		 mov	 ecx, edx
  00326	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0032c	3b f4		 cmp	 esi, esp
  0032e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00333	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv289[ebp], al
  00339	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0033c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00341	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00344	8b f4		 mov	 esi, esp
  00346	8b ca		 mov	 ecx, edx
  00348	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0034e	3b f4		 cmp	 esi, esp
  00350	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00355	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  0035b	8b f4		 mov	 esi, esp
  0035d	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv289[ebp]
  00364	50		 push	 eax
  00365	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00371	3b f4		 cmp	 esi, esp
  00373	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00378	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv291[ebp], eax
  0037e	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv291[ebp]
  00384	89 8d d0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  0038a	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0038f	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00395	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0039b	52		 push	 edx
  0039c	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  003a2	50		 push	 eax
  003a3	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  003a8	83 c4 08	 add	 esp, 8
  003ab	0f b6 c8	 movzx	 ecx, al
  003ae	85 c9		 test	 ecx, ecx
  003b0	74 0b		 je	 SHORT $LN15@operator

; 787  :                     _State |= ios_base::badbit; // insertion failed, quit

  003b2	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003b5	83 c8 04	 or	 eax, 4
  003b8	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 788  :                     break;

  003bb	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 789  :                 }
; 790  :             }

  003bd	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 791  :         }
; 792  : 
; 793  :         _Ostr.width(0);

  003c2	8b f4		 mov	 esi, esp
  003c4	6a 00		 push	 0
  003c6	6a 00		 push	 0
  003c8	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  003cd	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003d0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003d3	8b ca		 mov	 ecx, edx
  003d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003db	3b f4		 cmp	 esi, esp
  003dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003e2	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 794  :         _CATCH_IO_(ios_base, _Ostr)

  003e4	8b f4		 mov	 esi, esp
  003e6	6a 01		 push	 1
  003e8	6a 04		 push	 4
  003ea	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ef	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003f2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003f5	8b ca		 mov	 ecx, edx
  003f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003fd	3b f4		 cmp	 esi, esp
  003ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00404	b8 00 00 00 00	 mov	 eax, $LN23@operator
  00409	c3		 ret	 0
$LN19@operator:
  0040a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00411	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00413	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 795  :     }
; 796  : 
; 797  :     _Ostr.setstate(_State);

  0041a	8b f4		 mov	 esi, esp
  0041c	6a 00		 push	 0
  0041e	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00421	50		 push	 eax
  00422	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00425	8b 11		 mov	 edx, DWORD PTR [ecx]
  00427	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0042a	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0042d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00433	3b f4		 cmp	 esi, esp
  00435	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 798  :     return _Ostr;

  0043a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0043d	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00443	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0044a	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0044d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00452	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 799  : }

  00458	52		 push	 edx
  00459	8b cd		 mov	 ecx, ebp
  0045b	50		 push	 eax
  0045c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00462	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00467	58		 pop	 eax
  00468	5a		 pop	 edx
  00469	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0046c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00473	59		 pop	 ecx
  00474	5f		 pop	 edi
  00475	5e		 pop	 esi
  00476	5b		 pop	 ebx
  00477	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0047a	33 cd		 xor	 ecx, ebp
  0047c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00481	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00487	3b ec		 cmp	 ebp, esp
  00489	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0048e	8b e5		 mov	 esp, ebp
  00490	5d		 pop	 ebp
  00491	c3		 ret	 0
  00492	66 90		 npad	 2
$LN32@operator:
  00494	01 00 00 00	 DD	 1
  00498	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  0049c	b4 ff ff ff	 DD	 -76			; ffffffb4H
  004a0	08 00 00 00	 DD	 8
  004a4	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  004a8	5f		 DB	 95			; 0000005fH
  004a9	4f		 DB	 79			; 0000004fH
  004aa	6b		 DB	 107			; 0000006bH
  004ab	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\_УЧЁБА_\Лабораторные работы\КПО (Наркевич)\Лаба 4\Лаба 1\SE_Lab02.cpp
;	COMDAT ?prog_day_date@@YAXPAH@Z
_TEXT	SEGMENT
_num$1 = -44						; size = 4
_i$2 = -32						; size = 4
_day$ = -20						; size = 4
_month$ = -8						; size = 4
_mas$ = 8						; size = 4
?prog_day_date@@YAXPAH@Z PROC				; prog_day_date, COMDAT

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __A3F7A43C_SE_Lab02@cpp
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 10   : 	int month = 0, day = 0;

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _month$[ebp], 0
  0002c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _day$[ebp], 0

; 11   : 	for (int i = 0, num = prog_day_number; i < 12; i++)

  00033	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?prog_day_number@@3HA ; prog_day_number
  0003f	89 45 d4	 mov	 DWORD PTR _num$1[ebp], eax
  00042	eb 09		 jmp	 SHORT $LN4@prog_day_d
$LN2@prog_day_d:
  00044	8b 45 e0	 mov	 eax, DWORD PTR _i$2[ebp]
  00047	83 c0 01	 add	 eax, 1
  0004a	89 45 e0	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@prog_day_d:
  0004d	83 7d e0 0c	 cmp	 DWORD PTR _i$2[ebp], 12	; 0000000cH
  00051	7d 34		 jge	 SHORT $LN3@prog_day_d

; 12   : 	{
; 13   : 		if (num - mas[i] > 0)

  00053	8b 45 e0	 mov	 eax, DWORD PTR _i$2[ebp]
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _mas$[ebp]
  00059	8b 55 d4	 mov	 edx, DWORD PTR _num$1[ebp]
  0005c	2b 14 81	 sub	 edx, DWORD PTR [ecx+eax*4]
  0005f	85 d2		 test	 edx, edx
  00061	7e 1a		 jle	 SHORT $LN5@prog_day_d

; 14   : 		{
; 15   : 			month = i + 1;

  00063	8b 45 e0	 mov	 eax, DWORD PTR _i$2[ebp]
  00066	83 c0 01	 add	 eax, 1
  00069	89 45 f8	 mov	 DWORD PTR _month$[ebp], eax

; 16   : 			num -= mas[i];

  0006c	8b 45 e0	 mov	 eax, DWORD PTR _i$2[ebp]
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _mas$[ebp]
  00072	8b 55 d4	 mov	 edx, DWORD PTR _num$1[ebp]
  00075	2b 14 81	 sub	 edx, DWORD PTR [ecx+eax*4]
  00078	89 55 d4	 mov	 DWORD PTR _num$1[ebp], edx

; 17   : 		}

  0007b	eb 08		 jmp	 SHORT $LN6@prog_day_d
$LN5@prog_day_d:

; 18   : 		else
; 19   : 		{
; 20   : 			day = num;

  0007d	8b 45 d4	 mov	 eax, DWORD PTR _num$1[ebp]
  00080	89 45 ec	 mov	 DWORD PTR _day$[ebp], eax

; 21   : 			break;

  00083	eb 02		 jmp	 SHORT $LN3@prog_day_d
$LN6@prog_day_d:

; 22   : 		}
; 23   : 	}

  00085	eb bd		 jmp	 SHORT $LN2@prog_day_d
$LN3@prog_day_d:

; 24   : 	cout << "programmer day date: " << day << '.' << month << endl;

  00087	8b f4		 mov	 esi, esp
  00089	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0008e	8b fc		 mov	 edi, esp
  00090	8b 45 f8	 mov	 eax, DWORD PTR _month$[ebp]
  00093	50		 push	 eax
  00094	6a 2e		 push	 46			; 0000002eH
  00096	8b dc		 mov	 ebx, esp
  00098	8b 4d ec	 mov	 ecx, DWORD PTR _day$[ebp]
  0009b	51		 push	 ecx
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FCOBLJC@programmer?5day?5date?3?5@
  000a1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000a7	52		 push	 edx
  000a8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000ad	83 c4 08	 add	 esp, 8
  000b0	8b c8		 mov	 ecx, eax
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  000b8	3b dc		 cmp	 ebx, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  000c5	83 c4 08	 add	 esp, 8
  000c8	8b c8		 mov	 ecx, eax
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  000d0	3b fc		 cmp	 edi, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d7	8b c8		 mov	 ecx, eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000df	3b f4		 cmp	 esi, esp
  000e1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 25   : }

  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  000ef	3b ec		 cmp	 ebp, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
?prog_day_date@@YAXPAH@Z ENDP				; prog_day_date
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fstr_month@@YAXXZ
text$yd	SEGMENT
??__Fstr_month@@YAXXZ PROC				; `dynamic atexit destructor for 'str_month'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET ?str_month@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; str_month
  0001c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??__Fstr_month@@YAXXZ ENDP				; `dynamic atexit destructor for 'str_month''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\_УЧЁБА_\Лабораторные работы\КПО (Наркевич)\Лаба 4\Лаба 1\SE_Lab02.cpp
;	COMDAT ??__Estr_month@@YAXXZ
text$di	SEGMENT
??__Estr_month@@YAXXZ PROC				; `dynamic initializer for 'str_month'', COMDAT

; 5    : string str_month;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __A3F7A43C_SE_Lab02@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET ?str_month@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; str_month
  00026	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002b	68 00 00 00 00	 push	 OFFSET ??__Fstr_month@@YAXXZ ; `dynamic atexit destructor for 'str_month''
  00030	e8 00 00 00 00	 call	 _atexit
  00035	83 c4 04	 add	 esp, 4
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??__Estr_month@@YAXXZ ENDP				; `dynamic initializer for 'str_month''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -288						; size = 4
__Psave_guard$3 = -84					; size = 4
__Pfmod$4 = -72						; size = 4
__Pf$5 = -60						; size = 4
__Id$6 = -48						; size = 4
__Psave$7 = -36						; size = 4
__Lock$8 = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 422  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  0001d	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __102B4F75_xlocale
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 423  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00047	8b f4		 mov	 esi, esp
  00049	6a 00		 push	 0
  0004b	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00054	3b f4		 cmp	 esi, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 424  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  00067	89 45 dc	 mov	 DWORD PTR __Psave$7[ebp], eax

; 425  : 
; 426  :     const size_t _Id         = _Facet::id;

  0006a	8b f4		 mov	 esi, esp
  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$ctype@D@std@@2V0locale@2@A
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ
  00078	3b f4		 cmp	 esi, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	89 45 d0	 mov	 DWORD PTR __Id$6[ebp], eax

; 427  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);

  00082	8b 45 d0	 mov	 eax, DWORD PTR __Id$6[ebp]
  00085	50		 push	 eax
  00086	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00089	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  0008e	89 45 c4	 mov	 DWORD PTR __Pf$5[ebp], eax

; 428  : 
; 429  :     if (!_Pf) {

  00091	83 7d c4 00	 cmp	 DWORD PTR __Pf$5[ebp], 0
  00095	0f 85 9b 00 00
	00		 jne	 $LN2@use_facet

; 430  :         if (_Psave) {

  0009b	83 7d dc 00	 cmp	 DWORD PTR __Psave$7[ebp], 0
  0009f	74 0b		 je	 SHORT $LN3@use_facet

; 431  :             _Pf = _Psave; // lazy facet already allocated

  000a1	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000a4	89 45 c4	 mov	 DWORD PTR __Pf$5[ebp], eax
  000a7	e9 8a 00 00 00	 jmp	 $LN2@use_facet
$LN3@use_facet:

; 432  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000ac	8b f4		 mov	 esi, esp
  000ae	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000b1	50		 push	 eax
  000b2	8d 4d dc	 lea	 ecx, DWORD PTR __Psave$7[ebp]
  000b5	51		 push	 ecx
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  000bc	83 c4 08	 add	 esp, 8
  000bf	3b f4		 cmp	 esi, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	83 f8 ff	 cmp	 eax, -1
  000c9	75 07		 jne	 SHORT $LN5@use_facet

; 433  : #if _HAS_EXCEPTIONS
; 434  :             _Throw_bad_cast(); // lazy disallowed

  000cb	e8 00 00 00 00	 call	 ?_Throw_bad_cast@std@@YAXXZ ; std::_Throw_bad_cast

; 435  : #else // _HAS_EXCEPTIONS
; 436  :             _CSTD abort(); // lazy disallowed
; 437  : #endif // _HAS_EXCEPTIONS
; 438  :         } else { // queue up lazy facet for destruction

  000d0	eb 64		 jmp	 SHORT $LN2@use_facet
$LN5@use_facet:

; 439  :             auto _Pfmod = const_cast<locale::facet*>(_Psave);

  000d2	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000d5	89 45 b8	 mov	 DWORD PTR __Pfmod$4[ebp], eax

; 440  :             unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base*>(_Pfmod));

  000d8	6a 04		 push	 4
  000da	8d 4d ac	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  000dd	e8 00 00 00 00	 call	 ?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEXI@Z
  000e2	8b 45 b8	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  000e5	50		 push	 eax
  000e6	8d 4d ac	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  000e9	e8 00 00 00 00	 call	 ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
  000ee	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 441  : 
; 442  : #if defined(_M_CEE)
; 443  :             _Facet_Register_m(_Pfmod);
; 444  : #else // defined(_M_CEE)
; 445  :             _Facet_Register(_Pfmod);

  000f2	8b 45 b8	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  000fb	83 c4 04	 add	 esp, 4

; 446  : #endif // defined(_M_CEE)
; 447  : 
; 448  :             _Pfmod->_Incref();

  000fe	8b 45 b8	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  00101	8b 10		 mov	 edx, DWORD PTR [eax]
  00103	8b f4		 mov	 esi, esp
  00105	8b 4d b8	 mov	 ecx, DWORD PTR __Pfmod$4[ebp]
  00108	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0010b	ff d0		 call	 eax
  0010d	3b f4		 cmp	 esi, esp
  0010f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 449  :             _Facetptr<_Facet>::_Psave = _Psave;

  00114	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  00117	a3 00 00 00 00	 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, eax ; std::_Facetptr<std::ctype<char> >::_Psave

; 450  :             _Pf                       = _Psave;

  0011c	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  0011f	89 45 c4	 mov	 DWORD PTR __Pf$5[ebp], eax

; 451  : 
; 452  :             (void) _Psave_guard.release();

  00122	8d 4d ac	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  00125	e8 00 00 00 00	 call	 ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release

; 453  :         }

  0012a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0012e	8d 4d ac	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  00131	e8 00 00 00 00	 call	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
$LN2@use_facet:

; 454  :     }
; 455  : 
; 456  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  00136	8b 45 c4	 mov	 eax, DWORD PTR __Pf$5[ebp]
  00139	89 85 e0 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0013f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00146	8b f4		 mov	 esi, esp
  00148	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  0014b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00151	3b f4		 cmp	 esi, esp
  00153	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00158	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN7@use_facet:

; 457  :     _END_LOCK()
; 458  : } // end of use_facet body

  0015e	52		 push	 edx
  0015f	8b cd		 mov	 ecx, ebp
  00161	50		 push	 eax
  00162	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@use_facet
  00168	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0016d	58		 pop	 eax
  0016e	5a		 pop	 edx
  0016f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00172	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00179	59		 pop	 ecx
  0017a	5f		 pop	 edi
  0017b	5e		 pop	 esi
  0017c	5b		 pop	 ebx
  0017d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00180	33 cd		 xor	 ecx, ebp
  00182	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00187	81 c4 24 01 00
	00		 add	 esp, 292		; 00000124H
  0018d	3b ec		 cmp	 ebp, esp
  0018f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00194	8b e5		 mov	 esp, ebp
  00196	5d		 pop	 ebp
  00197	c3		 ret	 0
$LN15@use_facet:
  00198	03 00 00 00	 DD	 3
  0019c	00 00 00 00	 DD	 $LN14@use_facet
$LN14@use_facet:
  001a0	e8 ff ff ff	 DD	 -24			; ffffffe8H
  001a4	04 00 00 00	 DD	 4
  001a8	00 00 00 00	 DD	 $LN10@use_facet
  001ac	dc ff ff ff	 DD	 -36			; ffffffdcH
  001b0	04 00 00 00	 DD	 4
  001b4	00 00 00 00	 DD	 $LN11@use_facet
  001b8	ac ff ff ff	 DD	 -84			; ffffffacH
  001bc	04 00 00 00	 DD	 4
  001c0	00 00 00 00	 DD	 $LN12@use_facet
$LN12@use_facet:
  001c4	5f		 DB	 95			; 0000005fH
  001c5	50		 DB	 80			; 00000050H
  001c6	73		 DB	 115			; 00000073H
  001c7	61		 DB	 97			; 00000061H
  001c8	76		 DB	 118			; 00000076H
  001c9	65		 DB	 101			; 00000065H
  001ca	5f		 DB	 95			; 0000005fH
  001cb	67		 DB	 103			; 00000067H
  001cc	75		 DB	 117			; 00000075H
  001cd	61		 DB	 97			; 00000061H
  001ce	72		 DB	 114			; 00000072H
  001cf	64		 DB	 100			; 00000064H
  001d0	00		 DB	 0
$LN11@use_facet:
  001d1	5f		 DB	 95			; 0000005fH
  001d2	50		 DB	 80			; 00000050H
  001d3	73		 DB	 115			; 00000073H
  001d4	61		 DB	 97			; 00000061H
  001d5	76		 DB	 118			; 00000076H
  001d6	65		 DB	 101			; 00000065H
  001d7	00		 DB	 0
$LN10@use_facet:
  001d8	5f		 DB	 95			; 0000005fH
  001d9	4c		 DB	 76			; 0000004cH
  001da	6f		 DB	 111			; 0000006fH
  001db	63		 DB	 99			; 00000063H
  001dc	6b		 DB	 107			; 0000006bH
  001dd	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1:
  00012	8d 4d ac	 lea	 ecx, DWORD PTR __Psave_guard$3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 8a d8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-296]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
tv71 = -232						; size = 4
__Ptr0$ = -32						; size = 4
__Facptr$ = -20						; size = 4
_this$ = -8						; size = 4
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 368  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  00010	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __102B4F75_xlocale
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 369  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	8b 55 08	 mov	 edx, DWORD PTR __Id$[ebp]
  00033	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00036	73 17		 jae	 SHORT $LN6@Getfacet
  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00041	8b 45 08	 mov	 eax, DWORD PTR __Id$[ebp]
  00044	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00047	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], ecx
  0004d	eb 0a		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  0004f	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN7@Getfacet:
  00059	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv71[ebp]
  0005f	89 55 ec	 mov	 DWORD PTR __Facptr$[ebp], edx

; 370  :         if (_Facptr || !_Ptr->_Xparent) {

  00062	83 7d ec 00	 cmp	 DWORD PTR __Facptr$[ebp], 0
  00066	75 0e		 jne	 SHORT $LN3@Getfacet
  00068	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006e	0f b6 51 14	 movzx	 edx, BYTE PTR [ecx+20]
  00072	85 d2		 test	 edx, edx
  00074	75 05		 jne	 SHORT $LN2@Getfacet
$LN3@Getfacet:

; 371  :             return _Facptr; // found facet or not transparent

  00076	8b 45 ec	 mov	 eax, DWORD PTR __Facptr$[ebp]
  00079	eb 23		 jmp	 SHORT $LN1@Getfacet
$LN2@Getfacet:

; 372  :         }
; 373  : 
; 374  :         // look in current locale
; 375  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  0007b	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  00080	89 45 e0	 mov	 DWORD PTR __Ptr0$[ebp], eax

; 376  :         if (_Id < _Ptr0->_Facetcount) {

  00083	8b 45 e0	 mov	 eax, DWORD PTR __Ptr0$[ebp]
  00086	8b 4d 08	 mov	 ecx, DWORD PTR __Id$[ebp]
  00089	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  0008c	73 0e		 jae	 SHORT $LN4@Getfacet

; 377  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  0008e	8b 45 e0	 mov	 eax, DWORD PTR __Ptr0$[ebp]
  00091	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00094	8b 55 08	 mov	 edx, DWORD PTR __Id$[ebp]
  00097	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0009a	eb 02		 jmp	 SHORT $LN1@Getfacet
$LN4@Getfacet:

; 378  :         }
; 379  : 
; 380  :         return nullptr; // no entry in current locale

  0009c	33 c0		 xor	 eax, eax
$LN1@Getfacet:

; 381  :     }

  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
tv84 = -220						; size = 4
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 345  :     ~locale() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __102B4F75_xlocale
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 346  :         if (_Ptr) {

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00031	74 5a		 je	 SHORT $LN3@locale

; 347  :             delete _Ptr->_Decref();

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00039	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	8b f4		 mov	 esi, esp
  00040	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00043	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00046	ff d2		 call	 edx
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00055	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR $T1[ebp], 0
  0005c	74 25		 je	 SHORT $LN4@locale
  0005e	8b f4		 mov	 esi, esp
  00060	6a 01		 push	 1
  00062	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  00068	8b 10		 mov	 edx, DWORD PTR [eax]
  0006a	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	ff d0		 call	 eax
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
  00081	eb 0a		 jmp	 SHORT $LN3@locale
$LN4@locale:
  00083	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN3@locale:

; 348  :         }
; 349  :     }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00096	3b ec		 cmp	 ebp, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\typeinfo
;	COMDAT ?_Throw_bad_cast@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -208						; size = 12
?_Throw_bad_cast@std@@YAXXZ PROC			; std::_Throw_bad_cast, COMDAT

; 62   : [[noreturn]] inline void _Throw_bad_cast() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d ec	 lea	 edi, DWORD PTR [ebp-20]
  0000f	b9 05 00 00 00	 mov	 ecx, 5
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __0FE69EBF_typeinfo
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 63   :     _THROW(bad_cast{});

  00025	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0002b	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@XZ	; std::bad_cast::bad_cast
  00030	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00035	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 64   : }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?_Throw_bad_cast@std@@YAXXZ ENDP			; std::_Throw_bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1bad_cast@std@@UAE@XZ
  00028	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002b	83 e0 01	 and	 eax, 1
  0002e	74 0e		 je	 SHORT $LN2@scalar
  00030	6a 0c		 push	 12			; 0000000cH
  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00023	50		 push	 eax
  00024	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_cast@std@@6B@
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0bad_cast@std@@QAE@XZ PROC				; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx

; 137  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __A784D2C3_vcruntime_typeinfo@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 136  :         : exception("bad cast", 1)

  0002a	6a 01		 push	 1
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast@
  00031	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBDH@Z ; std::exception::exception

; 137  :     {

  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_cast@std@@6B@

; 138  :     }

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
??0bad_cast@std@@QAE@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1377 :     constexpr const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1378 :         return *this;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 1379 :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1373 :     constexpr _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1374 :         return *this;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 1375 :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 4676 :     _CONSTEXPR20 const _Alty& _Getal() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4677 :         return _Mypair._Get_first();

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4678 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 4672 :     _CONSTEXPR20 _Alty& _Getal() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4673 :         return _Mypair._Get_first();

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4674 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T2 = -245						; size = 1
__Al$3 = -44						; size = 4
__Ptr$4 = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4638 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4639 :         _Mypair._Myval2._Orphan_all();

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4640 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00051	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00059	0f b6 c0	 movzx	 eax, al
  0005c	85 c0		 test	 eax, eax
  0005e	74 39		 je	 SHORT $LN2@Tidy_deall

; 4641 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00060	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00066	89 4d e0	 mov	 DWORD PTR __Ptr$4[ebp], ecx

; 4642 :             auto& _Al          = _Getal();

  00069	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00071	89 45 d4	 mov	 DWORD PTR __Al$3[ebp], eax

; 4643 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00074	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00077	83 c0 04	 add	 eax, 4
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
  00080	83 c4 04	 add	 esp, 4

; 4644 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00083	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00089	83 c1 01	 add	 ecx, 1
  0008c	51		 push	 ecx
  0008d	8b 55 e0	 mov	 edx, DWORD PTR __Ptr$4[ebp]
  00090	52		 push	 edx
  00091	8b 4d d4	 mov	 ecx, DWORD PTR __Al$3[ebp]
  00094	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 4645 :         }
; 4646 : 
; 4647 : #if _HAS_CXX20
; 4648 :         if (_STD is_constant_evaluated()) {
; 4649 :             _Mypair._Myval2._Bx._Ptr = nullptr;
; 4650 :             _Mypair._Myval2._Mysize  = 0;
; 4651 :             _Mypair._Myval2._Myres   = 0;
; 4652 :         } else
; 4653 : #endif // _HAS_CXX20
; 4654 :         {
; 4655 :             _Mypair._Myval2._Mysize = 0;

  00099	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 4656 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000a3	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000a6	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 4657 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4658 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000ad	c6 85 0b ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  000b4	8d 85 0b ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000ba	50		 push	 eax
  000bb	b9 01 00 00 00	 mov	 ecx, 1
  000c0	6b d1 00	 imul	 edx, ecx, 0
  000c3	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  000d0	83 c4 08	 add	 esp, 8

; 4659 :         }
; 4660 :     }

  000d3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dd	59		 pop	 ecx
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000e7	3b ec		 cmp	 ebp, esp
  000e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
  000f2	cc		 int	 3
  000f3	cc		 int	 3
  000f4	cc		 int	 3
  000f5	cc		 int	 3
  000f6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 00 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-256]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -221						; size = 1
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 4616 :     _CONSTEXPR20 void _Tidy_init() noexcept { // initialize basic_string data members

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  00010	b9 09 00 00 00	 mov	 ecx, 9
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4617 :         auto& _My_data   = _Mypair._Myval2;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 4618 :         _My_data._Mysize = 0;

  00030	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00033	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 4619 : 
; 4620 : #if _HAS_CXX20
; 4621 :         if (_STD is_constant_evaluated()) {
; 4622 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4623 :             auto& _Al              = _Getal();
; 4624 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4625 :             _My_data._Bx._Ptr      = _New_ptr;
; 4626 : 
; 4627 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4628 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4629 :         } else
; 4630 : #endif // _HAS_CXX20
; 4631 :         {
; 4632 :             _My_data._Myres = _BUF_SIZE - 1;

  0003a	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003d	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 4633 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4634 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00044	c6 85 23 ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  0004b	8d 85 23 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00051	50		 push	 eax
  00052	b9 01 00 00 00	 mov	 ecx, 1
  00057	6b d1 00	 imul	 edx, ecx, 0
  0005a	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0005d	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00067	83 c4 08	 add	 esp, 8

; 4635 :         }
; 4636 :     }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__New_size$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 4612 :     _CONSTEXPR20 void _Eos(const size_type _New_size) { // set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  00010	b9 06 00 00 00	 mov	 ecx, 6
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4613 :         _Traits::assign(_Mypair._Myval2._Myptr()[_Mypair._Myval2._Mysize = _New_size], _Elem());

  0002a	c6 85 2f ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  00031	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00037	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0003a	8d 95 2f ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00040	52		 push	 edx
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00049	03 45 08	 add	 eax, DWORD PTR __New_size$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00052	83 c4 08	 add	 esp, 8

; 4614 :     }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4523 :     _NODISCARD _CONSTEXPR20 size_type _Calculate_growth(const size_type _Requested) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4524 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00032	50		 push	 eax
  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00039	51		 push	 ecx
  0003a	8b 55 08	 mov	 edx, DWORD PTR __Requested$[ebp]
  0003d	52		 push	 edx
  0003e	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4525 :     }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z
_TEXT	SEGMENT
$T1 = -216						; size = 4
__Masked$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Requested$ = 8					; size = 4
__Old$ = 12						; size = 4
__Max$ = 16						; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4510 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  0000f	b9 07 00 00 00	 mov	 ecx, 7
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  0002a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4511 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0002f	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  00032	83 c8 0f	 or	 eax, 15			; 0000000fH
  00035	89 45 f4	 mov	 DWORD PTR __Masked$[ebp], eax

; 4512 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00038	8b 45 f4	 mov	 eax, DWORD PTR __Masked$[ebp]
  0003b	3b 45 10	 cmp	 eax, DWORD PTR __Max$[ebp]
  0003e	76 05		 jbe	 SHORT $LN2@Calculate_

; 4513 :             return _Max;

  00040	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  00043	eb 37		 jmp	 SHORT $LN4@Calculate_
$LN2@Calculate_:

; 4514 :         }
; 4515 : 
; 4516 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00045	8b 45 0c	 mov	 eax, DWORD PTR __Old$[ebp]
  00048	d1 e8		 shr	 eax, 1
  0004a	8b 4d 10	 mov	 ecx, DWORD PTR __Max$[ebp]
  0004d	2b c8		 sub	 ecx, eax
  0004f	39 4d 0c	 cmp	 DWORD PTR __Old$[ebp], ecx
  00052	76 05		 jbe	 SHORT $LN3@Calculate_

; 4517 :             return _Max;

  00054	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  00057	eb 23		 jmp	 SHORT $LN4@Calculate_
$LN3@Calculate_:

; 4518 :         }
; 4519 : 
; 4520 :         return (_STD max) (_Masked, _Old + _Old / 2);

  00059	8b 45 0c	 mov	 eax, DWORD PTR __Old$[ebp]
  0005c	d1 e8		 shr	 eax, 1
  0005e	03 45 0c	 add	 eax, DWORD PTR __Old$[ebp]
  00061	89 85 28 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00067	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0006d	51		 push	 ecx
  0006e	8d 55 f4	 lea	 edx, DWORD PTR __Masked$[ebp]
  00071	52		 push	 edx
  00072	e8 00 00 00 00	 call	 ??$max@I@std@@YAABIABI0@Z ; std::max<unsigned int>
  00077	83 c4 08	 add	 esp, 8
  0007a	8b 00		 mov	 eax, DWORD PTR [eax]
$LN4@Calculate_:

; 4521 :     }

  0007c	52		 push	 edx
  0007d	8b cd		 mov	 ecx, ebp
  0007f	50		 push	 eax
  00080	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Calculate_
  00086	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0008b	58		 pop	 eax
  0008c	5a		 pop	 edx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00093	33 cd		 xor	 ecx, ebp
  00095	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009a	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000a0	3b ec		 cmp	 ebp, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
  000ab	90		 npad	 1
$LN7@Calculate_:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN6@Calculate_
$LN6@Calculate_:
  000b4	f4 ff ff ff	 DD	 -12			; fffffff4H
  000b8	04 00 00 00	 DD	 4
  000bc	00 00 00 00	 DD	 $LN5@Calculate_
$LN5@Calculate_:
  000c0	5f		 DB	 95			; 0000005fH
  000c1	4d		 DB	 77			; 0000004dH
  000c2	61		 DB	 97			; 00000061H
  000c3	73		 DB	 115			; 00000073H
  000c4	6b		 DB	 107			; 0000006bH
  000c5	65		 DB	 101			; 00000065H
  000c6	64		 DB	 100			; 00000064H
  000c7	00		 DB	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -264						; size = 4
$T2 = -252						; size = 4
$T3 = -240						; size = 4
__Storage_max$ = -36					; size = 4
__Alloc_max$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3941 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d b4	 lea	 edi, DWORD PTR [ebp-76]
  00010	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00027	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  0002f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3942 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

  00034	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  00042	83 c4 04	 add	 esp, 4
  00045	89 45 e8	 mov	 DWORD PTR __Alloc_max$[ebp], eax

; 3943 :         const size_type _Storage_max = // can always store small string

  00048	c7 85 10 ff ff
	ff 10 00 00 00	 mov	 DWORD PTR $T3[ebp], 16	; 00000010H
  00052	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00058	50		 push	 eax
  00059	8d 4d e8	 lea	 ecx, DWORD PTR __Alloc_max$[ebp]
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 ??$max@I@std@@YAABIABI0@Z ; std::max<unsigned int>
  00062	83 c4 08	 add	 esp, 8
  00065	8b 10		 mov	 edx, DWORD PTR [eax]
  00067	89 55 dc	 mov	 DWORD PTR __Storage_max$[ebp], edx

; 3944 :             (_STD max) (_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 3945 :         return (_STD min) (static_cast<size_type>((numeric_limits<difference_type>::max) ()),

  0006a	8b 45 dc	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  0006d	83 e8 01	 sub	 eax, 1
  00070	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00076	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  0007b	89 85 f8 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00081	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00087	51		 push	 ecx
  00088	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  00094	83 c4 08	 add	 esp, 8
  00097	8b 00		 mov	 eax, DWORD PTR [eax]

; 3946 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3947 :         );
; 3948 :     }

  00099	52		 push	 edx
  0009a	8b cd		 mov	 ecx, ebp
  0009c	50		 push	 eax
  0009d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@max_size
  000a3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a8	58		 pop	 eax
  000a9	5a		 pop	 edx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b0	33 cd		 xor	 ecx, ebp
  000b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b7	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000bd	3b ec		 cmp	 ebp, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
$LN5@max_size:
  000c8	01 00 00 00	 DD	 1
  000cc	00 00 00 00	 DD	 $LN4@max_size
$LN4@max_size:
  000d0	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000d4	04 00 00 00	 DD	 4
  000d8	00 00 00 00	 DD	 $LN3@max_size
$LN3@max_size:
  000dc	5f		 DB	 95			; 0000005fH
  000dd	41		 DB	 65			; 00000041H
  000de	6c		 DB	 108			; 0000006cH
  000df	6c		 DB	 108			; 0000006cH
  000e0	6f		 DB	 111			; 0000006fH
  000e1	63		 DB	 99			; 00000063H
  000e2	5f		 DB	 95			; 0000005fH
  000e3	6d		 DB	 109			; 0000006dH
  000e4	61		 DB	 97			; 00000061H
  000e5	78		 DB	 120			; 00000078H
  000e6	00		 DB	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 3937 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3938 :         return _Mypair._Myval2._Mysize;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 3939 :     }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT
; _this$ = ecx

; 3933 :     _NODISCARD _CONSTEXPR20 size_type length() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3934 :         return _Mypair._Myval2._Mysize;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 3935 :     }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT
; _this$ = ecx

; 3923 :     _NODISCARD _CONSTEXPR20 _Ret_z_ const _Elem* data() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3924 :         return _Mypair._Myval2._Myptr();

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3925 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
_TEXT	SEGMENT
$T1 = -245						; size = 1
$T2 = -233						; size = 1
__Ptr$3 = -32						; size = 4
__Old_size$ = -20					; size = 4
_this$ = -8						; size = 4
__Ch$ = 8						; size = 1
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT
; _this$ = ecx

; 3859 :     _CONSTEXPR20 void push_back(const _Elem _Ch) { // insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  00010	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3860 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00030	89 4d ec	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 3861 :         if (_Old_size < _Mypair._Myval2._Myres) {

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 4d ec	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  00039	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  0003c	73 4d		 jae	 SHORT $LN2@push_back

; 3862 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  0003e	8b 45 ec	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00041	83 c0 01	 add	 eax, 1
  00044	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 3863 :             _Elem* const _Ptr       = _Mypair._Myval2._Myptr();

  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00052	89 45 e0	 mov	 DWORD PTR __Ptr$3[ebp], eax

; 3864 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  00055	8d 45 08	 lea	 eax, DWORD PTR __Ch$[ebp]
  00058	50		 push	 eax
  00059	8b 4d e0	 mov	 ecx, DWORD PTR __Ptr$3[ebp]
  0005c	03 4d ec	 add	 ecx, DWORD PTR __Old_size$[ebp]
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00065	83 c4 08	 add	 esp, 8

; 3865 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  00068	c6 85 17 ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  0006f	8d 85 17 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00075	50		 push	 eax
  00076	8b 4d ec	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  00079	8b 55 e0	 mov	 edx, DWORD PTR __Ptr$3[ebp]
  0007c	8d 44 0a 01	 lea	 eax, DWORD PTR [edx+ecx+1]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00086	83 c4 08	 add	 esp, 8

; 3866 :             return;

  00089	eb 1f		 jmp	 SHORT $LN1@push_back
$LN2@push_back:

; 3867 :         }
; 3868 : 
; 3869 :         _Reallocate_grow_by(

  0008b	33 c0		 xor	 eax, eax
  0008d	88 85 0b ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  00093	0f b6 4d 08	 movzx	 ecx, BYTE PTR __Ch$[ebp]
  00097	51		 push	 ecx
  00098	0f b6 95 0b ff
	ff ff		 movzx	 edx, BYTE PTR $T1[ebp]
  0009f	52		 push	 edx
  000a0	6a 01		 push	 1
  000a2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>
$LN1@push_back:

; 3870 :             1,
; 3871 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem _Ch) {
; 3872 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 3873 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);
; 3874 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());
; 3875 :             },
; 3876 :             _Ch);
; 3877 :     }

  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 3837 :     _NODISCARD _CONSTEXPR20 reference operator[](const size_type _Off) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@operator:

; 3838 : #if _CONTAINER_DEBUG_LEVEL > 0
; 3839 :         _STL_VERIFY(_Off <= _Mypair._Myval2._Mysize, "string subscript out of range");

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00030	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00033	77 02		 ja	 SHORT $LN7@operator
  00035	eb 5c		 jmp	 SHORT $LN2@operator
$LN7@operator:
  00037	8b f4		 mov	 esi, esp
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00043	6a 00		 push	 0
  00045	68 ff 0e 00 00	 push	 3839			; 00000effH
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@MCAEMDPG@C?3?2Program?5Files?2Microsoft?5Visu@
  0004f	6a 02		 push	 2
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00057	83 c4 18	 add	 esp, 24			; 00000018H
  0005a	3b f4		 cmp	 esi, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	83 f8 01	 cmp	 eax, 1
  00064	75 01		 jne	 SHORT $LN11@operator
  00066	cc		 int	 3
$LN11@operator:
  00067	8b f4		 mov	 esi, esp
  00069	6a 00		 push	 0
  0006b	68 ff 0e 00 00	 push	 3839			; 00000effH
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_1ME@CELAKLBB@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00085	83 c4 14	 add	 esp, 20			; 00000014H
  00088	3b f4		 cmp	 esi, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	33 c0		 xor	 eax, eax
  00091	75 a4		 jne	 SHORT $LN7@operator
$LN2@operator:
  00093	33 c0		 xor	 eax, eax
  00095	75 93		 jne	 SHORT $LN4@operator

; 3840 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 3841 :         return _Mypair._Myval2._Myptr()[_Off];

  00097	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0009f	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]

; 3842 :     }

  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000ab	3b ec		 cmp	 ebp, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 3455 :     _CONSTEXPR20 basic_string& erase(const size_type _Off = 0) { // erase elements [_Off, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3456 :         _Mypair._Myval2._Check_offset(_Off);

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 3457 :         _Eos(_Off);

  00036	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 3458 :         return *this;

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 3459 :     }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3265 :     _CONSTEXPR20 basic_string& assign(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3266 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  00033	83 c4 04	 add	 esp, 4
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  0003c	83 c4 04	 add	 esp, 4
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00043	51		 push	 ecx
  00044	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3267 :     }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -233						; size = 1
$T2 = -221						; size = 1
__Old_ptr$3 = -20					; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3246 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  00010	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3247 :         // assign [_Ptr, _Ptr + _Count)
; 3248 :         if (_Count <= _Mypair._Myval2._Myres) {

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00030	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00033	77 4a		 ja	 SHORT $LN2@assign

; 3249 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0003d	89 45 ec	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 3250 :             _Mypair._Myval2._Mysize = _Count;

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00046	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3251 :             _Traits::move(_Old_ptr, _Ptr, _Count);

  00049	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 ec	 mov	 edx, DWORD PTR __Old_ptr$3[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 ?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::move
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3252 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0005d	c6 85 23 ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  00064	8d 85 23 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0006a	50		 push	 eax
  0006b	8b 4d ec	 mov	 ecx, DWORD PTR __Old_ptr$3[ebp]
  0006e	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  00071	51		 push	 ecx
  00072	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00077	83 c4 08	 add	 esp, 8

; 3253 :             return *this;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	eb 20		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 3254 :         }
; 3255 : 
; 3256 :         return _Reallocate_for(

  0007f	33 c0		 xor	 eax, eax
  00081	88 85 17 ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  00087	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0008a	51		 push	 ecx
  0008b	0f b6 95 17 ff
	ff ff		 movzx	 edx, BYTE PTR $T1[ebp]
  00092	52		 push	 edx
  00093	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00096	50		 push	 eax
  00097	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 3257 :             _Count,
; 3258 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3259 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3260 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3261 :             },
; 3262 :             _Ptr);
; 3263 :     }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  000a8	3b ec		 cmp	 ebp, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
__To_delete$ = -48					; size = 4
_$S8$ = -33						; size = 1
__Alproxy$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3006 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00010	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00027	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  0002f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3007 :         _Tidy_deallocate();

  00034	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 3008 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3009 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00044	50		 push	 eax
  00045	8d 4d df	 lea	 ecx, DWORD PTR _$S8$[ebp]
  00048	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0004d	8d 45 df	 lea	 eax, DWORD PTR _$S8$[ebp]
  00050	89 45 e8	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 3010 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

  00053	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	89 4d d0	 mov	 DWORD PTR __To_delete$[ebp], ecx

; 3011 :         _Mypair._Myval2._Myproxy = nullptr;

  0005b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 3012 :         _Delete_plain_internal(_Alproxy, _To_delete);

  00064	8b 45 d0	 mov	 eax, DWORD PTR __To_delete$[ebp]
  00067	50		 push	 eax
  00068	8b 4d e8	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00071	83 c4 08	 add	 esp, 8

; 3013 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3014 :     }

  00074	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  0007c	52		 push	 edx
  0007d	8b cd		 mov	 ecx, ebp
  0007f	50		 push	 eax
  00080	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@basic_stri
  00086	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0008b	58		 pop	 eax
  0008c	5a		 pop	 edx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00093	33 cd		 xor	 ecx, ebp
  00095	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009a	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000a0	3b ec		 cmp	 ebp, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
  000ab	90		 npad	 1
$LN5@basic_stri:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN4@basic_stri
$LN4@basic_stri:
  000b4	df ff ff ff	 DD	 -33			; ffffffdfH
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@basic_stri
$LN3@basic_stri:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	38		 DB	 56			; 00000038H
  000c3	00		 DB	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z
_TEXT	SEGMENT
tv72 = -329						; size = 1
$T1 = -324						; size = 4
$T2 = -312						; size = 4
__New_array$ = -108					; size = 4
__New_capacity$ = -96					; size = 4
__Al$ = -84						; size = 4
__Stay_small$ = -69					; size = 1
__My_data$ = -60					; size = 4
__Right_ptr$ = -48					; size = 4
__Right_size$ = -36					; size = 4
__Right_data$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Right$ = 8						; size = 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents, COMDAT
; _this$ = ecx

; 2919 :     _CONSTEXPR20 void _Construct_lv_contents(const basic_string& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 74 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-140]
  00013	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2920 :         // assign by copying data stored in _Right
; 2921 :         // pre: this != &_Right
; 2922 :         // pre: *this owns no memory, iterators orphaned (note:
; 2923 :         // _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2924 :         auto& _Right_data             = _Right._Mypair._Myval2;

  00037	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0003a	89 45 e8	 mov	 DWORD PTR __Right_data$[ebp], eax

; 2925 :         const size_type _Right_size   = _Right_data._Mysize;

  0003d	8b 45 e8	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00040	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00043	89 4d dc	 mov	 DWORD PTR __Right_size$[ebp], ecx

; 2926 :         const _Elem* const _Right_ptr = _Right_data._Myptr();

  00046	8b 4d e8	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0004e	89 45 d0	 mov	 DWORD PTR __Right_ptr$[ebp], eax

; 2927 :         auto& _My_data                = _Mypair._Myval2;

  00051	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00054	89 45 c4	 mov	 DWORD PTR __My_data$[ebp], eax

; 2928 : 
; 2929 : #if _HAS_CXX20
; 2930 :         const bool _Stay_small = _Right_size < _BUF_SIZE && !_STD is_constant_evaluated();
; 2931 : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 2932 :         const bool _Stay_small = _Right_size < _BUF_SIZE;

  00057	83 7d dc 10	 cmp	 DWORD PTR __Right_size$[ebp], 16 ; 00000010H
  0005b	73 09		 jae	 SHORT $LN4@Construct_
  0005d	c6 85 b7 fe ff
	ff 01		 mov	 BYTE PTR tv72[ebp], 1
  00064	eb 07		 jmp	 SHORT $LN5@Construct_
$LN4@Construct_:
  00066	c6 85 b7 fe ff
	ff 00		 mov	 BYTE PTR tv72[ebp], 0
$LN5@Construct_:
  0006d	8a 85 b7 fe ff
	ff		 mov	 al, BYTE PTR tv72[ebp]
  00073	88 45 bb	 mov	 BYTE PTR __Stay_small$[ebp], al

; 2933 : #endif // _HAS_CXX20
; 2934 : 
; 2935 :         // NOTE: even if _Right is in large mode, we only go into large mode ourselves if the actual size of _Right
; 2936 :         // requires it
; 2937 :         if (_Stay_small) { // stay small, don't allocate

  00076	0f b6 45 bb	 movzx	 eax, BYTE PTR __Stay_small$[ebp]
  0007a	85 c0		 test	 eax, eax
  0007c	74 2d		 je	 SHORT $LN2@Construct_

; 2938 :             _Traits::copy(_My_data._Bx._Buf, _Right_ptr, _BUF_SIZE);

  0007e	6a 10		 push	 16			; 00000010H
  00080	8b 45 d0	 mov	 eax, DWORD PTR __Right_ptr$[ebp]
  00083	50		 push	 eax
  00084	8b 4d c4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00087	83 c1 04	 add	 ecx, 4
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2939 :             _My_data._Mysize = _Right_size;

  00093	8b 45 c4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00096	8b 4d dc	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  00099	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2940 :             _My_data._Myres  = _BUF_SIZE - 1;

  0009c	8b 45 c4	 mov	 eax, DWORD PTR __My_data$[ebp]
  0009f	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 2941 :             return;

  000a6	e9 97 00 00 00	 jmp	 $LN1@Construct_
$LN2@Construct_:

; 2942 :         }
; 2943 : 
; 2944 :         auto& _Al                     = _Getal();

  000ab	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  000b3	89 45 ac	 mov	 DWORD PTR __Al$[ebp], eax

; 2945 :         const size_type _New_capacity = (_STD min) (_Right_size | _ALLOC_MASK, max_size());

  000b6	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  000be	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  000c4	8b 45 dc	 mov	 eax, DWORD PTR __Right_size$[ebp]
  000c7	83 c8 0f	 or	 eax, 15			; 0000000fH
  000ca	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  000d0	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000d6	51		 push	 ecx
  000d7	8d 95 bc fe ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  000dd	52		 push	 edx
  000de	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  000e3	83 c4 08	 add	 esp, 8
  000e6	8b 00		 mov	 eax, DWORD PTR [eax]
  000e8	89 45 a0	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 2946 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  000eb	8b 45 a0	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  000ee	83 c0 01	 add	 eax, 1
  000f1	50		 push	 eax
  000f2	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  000f5	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  000fa	89 45 94	 mov	 DWORD PTR __New_array$[ebp], eax

; 2947 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  000fd	8d 45 94	 lea	 eax, DWORD PTR __New_array$[ebp]
  00100	50		 push	 eax
  00101	8b 4d c4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00104	83 c1 04	 add	 ecx, 4
  00107	51		 push	 ecx
  00108	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  0010d	83 c4 08	 add	 esp, 8

; 2948 : 
; 2949 : #if _HAS_CXX20
; 2950 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2951 :             _Traits::assign(_Unfancy(_New_array), _New_capacity + 1, _Elem());
; 2952 :         }
; 2953 : #endif // _HAS_CXX20
; 2954 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00110	8b 45 dc	 mov	 eax, DWORD PTR __Right_size$[ebp]
  00113	83 c0 01	 add	 eax, 1
  00116	50		 push	 eax
  00117	8b 4d d0	 mov	 ecx, DWORD PTR __Right_ptr$[ebp]
  0011a	51		 push	 ecx
  0011b	8b 55 94	 mov	 edx, DWORD PTR __New_array$[ebp]
  0011e	52		 push	 edx
  0011f	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00124	83 c4 04	 add	 esp, 4
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
  0012d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2955 :         _My_data._Mysize = _Right_size;

  00130	8b 45 c4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00133	8b 4d dc	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  00136	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2956 :         _My_data._Myres  = _New_capacity;

  00139	8b 45 c4	 mov	 eax, DWORD PTR __My_data$[ebp]
  0013c	8b 4d a0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0013f	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN1@Construct_:

; 2957 :     }

  00142	52		 push	 edx
  00143	8b cd		 mov	 ecx, ebp
  00145	50		 push	 eax
  00146	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Construct_
  0014c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00151	58		 pop	 eax
  00152	5a		 pop	 edx
  00153	5f		 pop	 edi
  00154	5e		 pop	 esi
  00155	5b		 pop	 ebx
  00156	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00159	33 cd		 xor	 ecx, ebp
  0015b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00160	81 c4 4c 01 00
	00		 add	 esp, 332		; 0000014cH
  00166	3b ec		 cmp	 ebp, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c2 04 00	 ret	 4
  00173	90		 npad	 1
$LN8@Construct_:
  00174	01 00 00 00	 DD	 1
  00178	00 00 00 00	 DD	 $LN7@Construct_
$LN7@Construct_:
  0017c	94 ff ff ff	 DD	 -108			; ffffff94H
  00180	04 00 00 00	 DD	 4
  00184	00 00 00 00	 DD	 $LN6@Construct_
$LN6@Construct_:
  00188	5f		 DB	 95			; 0000005fH
  00189	4e		 DB	 78			; 0000004eH
  0018a	65		 DB	 101			; 00000065H
  0018b	77		 DB	 119			; 00000077H
  0018c	5f		 DB	 95			; 0000005fH
  0018d	61		 DB	 97			; 00000061H
  0018e	72		 DB	 114			; 00000072H
  0018f	72		 DB	 114			; 00000072H
  00190	61		 DB	 97			; 00000061H
  00191	79		 DB	 121			; 00000079H
  00192	00		 DB	 0
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T2 = -265						; size = 1
__Proxy$ = -64						; size = 8
_$S10$ = -45						; size = 1
__Alproxy$ = -36					; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2522 :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0001e	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	0f b6 85 f7 fe
	ff ff		 movzx	 eax, BYTE PTR $T2[ebp]
  00053	50		 push	 eax
  00054	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2523 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00063	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0006b	50		 push	 eax
  0006c	8d 4d d3	 lea	 ecx, DWORD PTR _$S10$[ebp]
  0006f	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  00074	8d 45 d3	 lea	 eax, DWORD PTR _$S10$[ebp]
  00077	89 45 dc	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2524 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  0007a	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d dc	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  00081	51		 push	 ecx
  00082	8d 4d c0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00085	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0008a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2525 :         _Tidy_init();

  0008e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2526 :         assign(_Ptr);

  00096	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2527 :         _Proxy._Release();

  000a2	8d 4d c0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000a5	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2528 :     }

  000aa	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000ae	8d 4d c0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000b1	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000b6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000bd	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	52		 push	 edx
  000c1	8b cd		 mov	 ecx, ebp
  000c3	50		 push	 eax
  000c4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@basic_stri
  000ca	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000cf	58		 pop	 eax
  000d0	5a		 pop	 edx
  000d1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000db	59		 pop	 ecx
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx
  000df	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e2	33 cd		 xor	 ecx, ebp
  000e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e9	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  000ef	3b ec		 cmp	 ebp, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c2 04 00	 ret	 4
$LN9@basic_stri:
  000fc	02 00 00 00	 DD	 2
  00100	00 00 00 00	 DD	 $LN8@basic_stri
$LN8@basic_stri:
  00104	d3 ff ff ff	 DD	 -45			; ffffffd3H
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN5@basic_stri
  00110	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00114	08 00 00 00	 DD	 8
  00118	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  0011c	5f		 DB	 95			; 0000005fH
  0011d	50		 DB	 80			; 00000050H
  0011e	72		 DB	 114			; 00000072H
  0011f	6f		 DB	 111			; 0000006fH
  00120	78		 DB	 120			; 00000078H
  00121	79		 DB	 121			; 00000079H
  00122	00		 DB	 0
$LN5@basic_stri:
  00123	24		 DB	 36			; 00000024H
  00124	53		 DB	 83			; 00000053H
  00125	31		 DB	 49			; 00000031H
  00126	30		 DB	 48			; 00000030H
  00127	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 8a ec fe ff
	ff		 mov	 ecx, DWORD PTR [edx-276]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -233						; size = 1
$T3 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2474 :         : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 09 00 00 00	 mov	 ecx, 9
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00049	0f b6 85 23 ff
	ff ff		 movzx	 eax, BYTE PTR $T3[ebp]
  00050	50		 push	 eax
  00051	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>

; 2475 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00061	50		 push	 eax
  00062	8d 8d 17 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00068	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0006d	50		 push	 eax
  0006e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 2476 :         _Tidy_init();

  00076	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2477 :     }

  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00095	3b ec		 cmp	 ebp, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
  000a0	cc		 int	 3
  000a1	cc		 int	 3
  000a2	cc		 int	 3
  000a3	cc		 int	 3
  000a4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 0c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-244]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -277						; size = 1
$T3 = -265						; size = 1
__Proxy$ = -64						; size = 8
_$S12$ = -45						; size = 1
__Alproxy$ = -36					; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2458 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  0001e	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00054	50		 push	 eax
  00055	8d 85 f7 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
  00061	83 c4 08	 add	 esp, 8
  00064	50		 push	 eax
  00065	0f b6 8d eb fe
	ff ff		 movzx	 ecx, BYTE PTR $T2[ebp]
  0006c	51		 push	 ecx
  0006d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
  00075	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2459 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0007c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00084	50		 push	 eax
  00085	8d 4d d3	 lea	 ecx, DWORD PTR _$S12$[ebp]
  00088	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0008d	8d 45 d3	 lea	 eax, DWORD PTR _$S12$[ebp]
  00090	89 45 dc	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2460 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00093	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00096	50		 push	 eax
  00097	8b 4d dc	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  0009a	51		 push	 ecx
  0009b	8d 4d c0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0009e	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000a3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2461 :         _Construct_lv_contents(_Right);

  000a7	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  000aa	50		 push	 eax
  000ab	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	e8 00 00 00 00	 call	 ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents

; 2462 :         _Proxy._Release();

  000b3	8d 4d c0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000b6	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2463 :     }

  000bb	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000bf	8d 4d c0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000c2	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000c7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ce	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000d1	52		 push	 edx
  000d2	8b cd		 mov	 ecx, ebp
  000d4	50		 push	 eax
  000d5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@basic_stri
  000db	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e0	58		 pop	 eax
  000e1	5a		 pop	 edx
  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ec	59		 pop	 ecx
  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi
  000ef	5b		 pop	 ebx
  000f0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f3	33 cd		 xor	 ecx, ebp
  000f5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fa	81 c4 1c 01 00
	00		 add	 esp, 284		; 0000011cH
  00100	3b ec		 cmp	 ebp, esp
  00102	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c2 04 00	 ret	 4
  0010d	0f 1f 00	 npad	 3
$LN9@basic_stri:
  00110	02 00 00 00	 DD	 2
  00114	00 00 00 00	 DD	 $LN8@basic_stri
$LN8@basic_stri:
  00118	d3 ff ff ff	 DD	 -45			; ffffffd3H
  0011c	01 00 00 00	 DD	 1
  00120	00 00 00 00	 DD	 $LN5@basic_stri
  00124	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00128	08 00 00 00	 DD	 8
  0012c	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  00130	5f		 DB	 95			; 0000005fH
  00131	50		 DB	 80			; 00000050H
  00132	72		 DB	 114			; 00000072H
  00133	6f		 DB	 111			; 0000006fH
  00134	78		 DB	 120			; 00000078H
  00135	79		 DB	 121			; 00000079H
  00136	00		 DB	 0
$LN5@basic_stri:
  00137	24		 DB	 36			; 00000024H
  00138	53		 DB	 83			; 00000053H
  00139	31		 DB	 49			; 00000031H
  0013a	32		 DB	 50			; 00000032H
  0013b	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 8a e0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-288]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	83 c1 04	 add	 ecx, 4
  00026	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 2356 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 2354 :         _CONSTEXPR20 _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2344 :     [[noreturn]] static void _Xran() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2345 :         _Xout_of_range("invalid string position");

  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00026	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN2@Xran:

; 2346 :     }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT
; _this$ = ecx

; 2330 :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2331 :         // checks whether _Off is in the bounds of [0, size()]
; 2332 :         if (_Mysize < _Off) {

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00030	3b 4d 08	 cmp	 ecx, DWORD PTR __Off$[ebp]
  00033	73 05		 jae	 SHORT $LN3@Check_offs

; 2333 :             _Xran();

  00035	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN3@Check_offs:

; 2334 :         }
; 2335 :     }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 2321 :     _CONSTEXPR20 bool _Large_string_engaged() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  00010	b9 04 00 00 00	 mov	 ecx, 4
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2322 : #if _HAS_CXX20
; 2323 :         if (_STD is_constant_evaluated()) {
; 2324 :             return true;
; 2325 :         }
; 2326 : #endif // _HAS_CXX20
; 2327 :         return _BUF_SIZE <= _Myres;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00031	72 0c		 jb	 SHORT $LN3@Large_stri
  00033	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  0003d	eb 0a		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  0003f	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
  00049	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv66[ebp]

; 2328 :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -20						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2312 :     _CONSTEXPR20 const value_type* _Myptr() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  00010	b9 06 00 00 00	 mov	 ecx, 6
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2313 :         const value_type* _Result = _Bx._Buf;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c0 04	 add	 eax, 4
  00030	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax

; 2314 :         if (_Large_string_engaged()) {

  00033	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0003b	0f b6 c0	 movzx	 eax, al
  0003e	85 c0		 test	 eax, eax
  00040	74 12		 je	 SHORT $LN2@Myptr

; 2315 :             _Result = _Unfancy(_Bx._Ptr);

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  0004e	83 c4 04	 add	 esp, 4
  00051	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2316 :         }
; 2317 : 
; 2318 :         return _Result;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __Result$[ebp]

; 2319 :     }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Result$ = -20						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2303 :     _CONSTEXPR20 value_type* _Myptr() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  00010	b9 06 00 00 00	 mov	 ecx, 6
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2304 :         value_type* _Result = _Bx._Buf;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c0 04	 add	 eax, 4
  00030	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax

; 2305 :         if (_Large_string_engaged()) {

  00033	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0003b	0f b6 c0	 movzx	 eax, al
  0003e	85 c0		 test	 eax, eax
  00040	74 12		 je	 SHORT $LN2@Myptr

; 2306 :             _Result = _Unfancy(_Bx._Ptr);

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  0004e	83 c4 04	 add	 esp, 4
  00051	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2307 :         }
; 2308 : 
; 2309 :         return _Result;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __Result$[ebp]

; 2310 :     }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 2292 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 04	 add	 ecx, 4
  00038	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 2293 : 
; 2294 :     // length of internal buffer, [1, 16]:
; 2295 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2296 :     // roundup mask for allocated buffers, [0, 15]:
; 2297 :     static constexpr size_type _ALLOC_MASK = sizeof(value_type) <= 1 ? 15
; 2298 :                                            : sizeof(value_type) <= 2 ? 7
; 2299 :                                            : sizeof(value_type) <= 4 ? 3
; 2300 :                                            : sizeof(value_type) <= 8 ? 1
; 2301 :                                                                      : 0;
; 2302 : 
; 2303 :     _CONSTEXPR20 value_type* _Myptr() noexcept {
; 2304 :         value_type* _Result = _Bx._Buf;
; 2305 :         if (_Large_string_engaged()) {
; 2306 :             _Result = _Unfancy(_Bx._Ptr);
; 2307 :         }
; 2308 : 
; 2309 :         return _Result;
; 2310 :     }
; 2311 : 
; 2312 :     _CONSTEXPR20 const value_type* _Myptr() const noexcept {
; 2313 :         const value_type* _Result = _Bx._Buf;
; 2314 :         if (_Large_string_engaged()) {
; 2315 :             _Result = _Unfancy(_Bx._Ptr);
; 2316 :         }
; 2317 : 
; 2318 :         return _Result;
; 2319 :     }
; 2320 : 
; 2321 :     _CONSTEXPR20 bool _Large_string_engaged() const noexcept {
; 2322 : #if _HAS_CXX20
; 2323 :         if (_STD is_constant_evaluated()) {
; 2324 :             return true;
; 2325 :         }
; 2326 : #endif // _HAS_CXX20
; 2327 :         return _BUF_SIZE <= _Myres;
; 2328 :     }
; 2329 : 
; 2330 :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {
; 2331 :         // checks whether _Off is in the bounds of [0, size()]
; 2332 :         if (_Mysize < _Off) {
; 2333 :             _Xran();
; 2334 :         }
; 2335 :     }
; 2336 : 
; 2337 :     _CONSTEXPR20 void _Check_offset_exclusive(const size_type _Off) const {
; 2338 :         // checks whether _Off is in the bounds of [0, size())
; 2339 :         if (_Mysize <= _Off) {
; 2340 :             _Xran();
; 2341 :         }
; 2342 :     }
; 2343 : 
; 2344 :     [[noreturn]] static void _Xran() {
; 2345 :         _Xout_of_range("invalid string position");
; 2346 :     }
; 2347 : 
; 2348 :     _CONSTEXPR20 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2349 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2350 :         return (_STD min) (_Size, _Mysize - _Off);
; 2351 :     }
; 2352 : 
; 2353 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2354 :         _CONSTEXPR20 _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers
; 2355 : 
; 2356 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2357 : 
; 2358 :         value_type _Buf[_BUF_SIZE];
; 2359 :         pointer _Ptr;
; 2360 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2361 :     } _Bx;
; 2362 : 
; 2363 :     size_type _Mysize = 0; // current length of string

  0003d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00040	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 2364 :     size_type _Myres  = 0; // current storage reserved for string

  00047	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 2292 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

  00051	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 697  :     _NODISCARD static _CONSTEXPR20 _Alloc select_on_container_copy_construction(const _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 698  :         return _Al;

  00021	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 699  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00021	83 c8 ff	 or	 eax, -1

; 695  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 830  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 831  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$00@std@@YAII@Z ; std::_Get_size_of_n<1>
  00033	83 c4 04	 add	 esp, 4
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0003c	83 c4 04	 add	 esp, 4

; 832  :     }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 825  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 826  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 827  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00037	83 c4 08	 add	 esp, 8

; 828  :     }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 817  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2380 : [[noreturn]] inline void _Xlen_string() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2381 :     _Xlength_error("string too long");

  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00026	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen_strin:

; 2382 : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 461  :     _NODISCARD static constexpr int_type eof() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 462  :         return static_cast<int_type>(EOF);

  00021	83 c8 ff	 or	 eax, -1

; 463  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 453  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d fc	 lea	 edi, DWORD PTR [ebp-4]
  0000f	b9 01 00 00 00	 mov	 ecx, 1
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 454  :         return _Left == _Right;

  00025	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002b	8b 10		 mov	 edx, DWORD PTR [eax]
  0002d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002f	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00031	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  0003b	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0003d	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00047	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 455  :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z PROC ; std::_Narrow_char_traits<char,int>::to_char_type, COMDAT

; 445  :     _NODISCARD static constexpr _Elem to_char_type(const int_type& _Meta) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 446  :         return static_cast<_Elem>(_Meta);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00024	8a 00		 mov	 al, BYTE PTR [eax]

; 447  :     }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?to_char_type@?$_Narrow_char_traits@DH@std@@SADABH@Z ENDP ; std::_Narrow_char_traits<char,int>::to_char_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z PROC	; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 433  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 434  :         _Left = _Right;

  00021	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00027	8a 11		 mov	 dl, BYTE PTR [ecx]
  00029	88 10		 mov	 BYTE PTR [eax], dl

; 435  :     }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ENDP	; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 380  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 381  :         // find length of null-terminated string
; 382  : #if _HAS_CXX17
; 383  : #ifdef __cpp_char8_t
; 384  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 385  : #if _HAS_U8_INTRINSICS
; 386  :             return __builtin_u8strlen(_First);
; 387  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 388  :             return _Primary_char_traits::length(_First);
; 389  : #endif // _HAS_U8_INTRINSICS
; 390  :         } else
; 391  : #endif // __cpp_char8_t
; 392  :         {
; 393  :             return __builtin_strlen(_First);
; 394  :         }
; 395  : #else // _HAS_CXX17
; 396  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _strlen
  0002a	83 c4 04	 add	 esp, 4

; 397  : #endif // _HAS_CXX17
; 398  :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Char_traits<char,int>::move, COMDAT

; 79   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 80   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 81   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 82   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 83   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 84   : #if _HAS_CXX20
; 85   :         if (_STD is_constant_evaluated()) {
; 86   :             // dest: [_First1, _First1 + _Count)
; 87   :             // src: [_First2, _First2 + _Count)
; 88   :             // We need to handle overlapping ranges.
; 89   :             // If _First1 is in the src range, we need a backward loop.
; 90   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 91   : 
; 92   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 93   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 94   :             bool _Loop_forward = true;
; 95   : 
; 96   :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 97   :                 if (_First1 == _Src) {
; 98   :                     _Loop_forward = false;
; 99   :                     break;
; 100  :                 }
; 101  :             }
; 102  : 
; 103  :             if (_Loop_forward) {
; 104  :                 for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 105  :                     _First1[_Idx] = _First2[_Idx];
; 106  :                 }
; 107  :             } else {
; 108  :                 for (size_t _Idx = _Count; _Idx != 0; --_Idx) {
; 109  :                     _First1[_Idx - 1] = _First2[_Idx - 1];
; 110  :                 }
; 111  :             }
; 112  : 
; 113  :             return _First1;
; 114  :         }
; 115  : #endif // _HAS_CXX20
; 116  : 
; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00021	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 _memmove
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 118  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 119  : 
; 120  :         return _First1;

  00035	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 121  :     }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Char_traits<char,int>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring
;	COMDAT ?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Char_traits<char,int>::copy, COMDAT

; 48   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __CF153B44_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 49   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 50   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 51   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 52   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 53   : #if _HAS_CXX20
; 54   :         if (_STD is_constant_evaluated()) {
; 55   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap; see LWG-3085
; 56   :             for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 57   :                 _First1[_Idx] = _First2[_Idx];
; 58   :             }
; 59   : 
; 60   :             return _First1;
; 61   :         }
; 62   : #endif // _HAS_CXX20
; 63   : 
; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00021	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 _memcpy
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 65   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 66   : 
; 67   :         return _First1;

  00035	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 68   :     }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Char_traits<char,int>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0000f	b9 03 00 00 00	 mov	 ecx, 3
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __7F396DA6_xutility
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00025	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
  0002e	83 c4 04	 add	 esp, 4
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Voidify_iter@PAU_Container_proxy@std@@@std@@YAPAXPAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
  00037	83 c4 04	 add	 esp, 4
  0003a	50		 push	 eax
  0003b	6a 08		 push	 8
  0003d	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00042	83 c4 08	 add	 esp, 8
  00045	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
  00054	83 c4 04	 add	 esp, 4
  00057	8b 10		 mov	 edx, DWORD PTR [eax]
  00059	52		 push	 edx
  0005a	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00060	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 150  :     }
; 151  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __264C4909_xstddef
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 253  :     return __builtin_addressof(_Val);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 254  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Basic_container_proxy_ptr12@std@@IAE@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT
; _this$ = ecx

; 1300 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1293 :     _Container_proxy* _Ptr = nullptr;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1300 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??0_Basic_container_proxy_ptr12@std@@IAE@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ PROC	; std::_Basic_container_proxy_ptr12::_Release, COMDAT
; _this$ = ecx

; 1295 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1296 :         _Ptr = nullptr;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1297 :     }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ENDP	; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT
; _this$ = ecx

; 1074 :     void _Orphan_all_locked_v3() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00027	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  0002f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1075 :         _Lockit _Lock(_LOCK_DEBUG);

  00034	8b f4		 mov	 esi, esp
  00036	6a 03		 push	 3
  00038	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00041	3b f4		 cmp	 esi, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1076 :         _Orphan_all_unlocked_v3();

  00048	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1077 :     }

  00050	8b f4		 mov	 esi, esp
  00052	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	52		 push	 edx
  00063	8b cd		 mov	 ecx, ebp
  00065	50		 push	 eax
  00066	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Orphan_all
  0006c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00071	58		 pop	 eax
  00072	5a		 pop	 edx
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00079	33 cd		 xor	 ecx, ebp
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
  00091	0f 1f 00	 npad	 3
$LN5@Orphan_all:
  00094	01 00 00 00	 DD	 1
  00098	00 00 00 00	 DD	 $LN4@Orphan_all
$LN4@Orphan_all:
  0009c	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000a0	04 00 00 00	 DD	 4
  000a4	00 00 00 00	 DD	 $LN3@Orphan_all
$LN3@Orphan_all:
  000a8	5f		 DB	 95			; 0000005fH
  000a9	4c		 DB	 76			; 0000004cH
  000aa	6f		 DB	 111			; 0000006fH
  000ab	63		 DB	 99			; 00000063H
  000ac	6b		 DB	 107			; 0000006bH
  000ad	00		 DB	 0
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -20						; size = 4
_this$ = -8						; size = 4
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT
; _this$ = ecx

; 1215 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  00010	b9 06 00 00 00	 mov	 ecx, 6
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1216 :     if (!_Myproxy) { // no proxy, already done

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00030	75 02		 jne	 SHORT $LN5@Orphan_all

; 1217 :         return;

  00032	eb 3b		 jmp	 SHORT $LN6@Orphan_all
$LN5@Orphan_all:

; 1218 :     }
; 1219 : 
; 1220 :     // proxy allocated, drain it
; 1221 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	83 c1 04	 add	 ecx, 4
  0003c	89 4d ec	 mov	 DWORD PTR __Pnext$1[ebp], ecx
  0003f	eb 0d		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
  00041	8b 45 ec	 mov	 eax, DWORD PTR __Pnext$1[ebp]
  00044	8b 08		 mov	 ecx, DWORD PTR [eax]
  00046	8b 55 ec	 mov	 edx, DWORD PTR __Pnext$1[ebp]
  00049	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0004c	89 02		 mov	 DWORD PTR [edx], eax
$LN4@Orphan_all:
  0004e	8b 45 ec	 mov	 eax, DWORD PTR __Pnext$1[ebp]
  00051	83 38 00	 cmp	 DWORD PTR [eax], 0
  00054	74 0d		 je	 SHORT $LN3@Orphan_all

; 1222 :         _Pnext->_Myproxy = nullptr;

  00056	8b 45 ec	 mov	 eax, DWORD PTR __Pnext$1[ebp]
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1223 :     }

  00061	eb de		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1224 :     _Myproxy->_Myfirstiter = nullptr;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 08		 mov	 ecx, DWORD PTR [eax]
  00068	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
$LN6@Orphan_all:

; 1225 : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1227 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1228 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1229 : #if _HAS_CXX20
; 1230 :     if (_STD is_constant_evaluated()) {
; 1231 :         _Orphan_all_unlocked_v3();
; 1232 :     } else
; 1233 : #endif // _HAS_CXX20
; 1234 :     {
; 1235 :         _Orphan_all_locked_v3();

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1236 :     }
; 1237 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1238 : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1043 :     _CONSTEXPR20 _Container_base12() noexcept = default;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1044 : 
; 1045 :     _Container_base12(const _Container_base12&) = delete;
; 1046 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1047 : 
; 1048 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1049 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1050 : 
; 1051 :     template <class _Alloc>
; 1052 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1053 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1054 :         _Construct_in_place(*_New_proxy, this);
; 1055 :         _Myproxy            = _New_proxy;
; 1056 :         _New_proxy->_Mycont = this;
; 1057 :     }
; 1058 : 
; 1059 :     template <class _Alloc>
; 1060 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1061 :         // pre: no iterators refer to the existing proxy
; 1062 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1063 :         _Construct_in_place(*_New_proxy, this);
; 1064 :         _New_proxy->_Mycont = this;
; 1065 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1066 :     }
; 1067 : 
; 1068 :     _Container_proxy* _Myproxy = nullptr;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1043 :     _CONSTEXPR20 _Container_base12() noexcept = default;

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1035 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Mycont_$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 1036 : 
; 1037 :     const _Container_base12* _Mycont       = nullptr;
; 1038 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1035 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

  0003c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -44					; size = 4
__Min_back_shift$ = -32					; size = 4
__Ptr_container$ = -20					; size = 4
__Ptr_user$ = -8					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

  00025	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	83 c1 27	 add	 ecx, 39			; 00000027H
  0002d	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  00030	89 0a		 mov	 DWORD PTR [edx], ecx

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

  00032	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 4d f8	 mov	 DWORD PTR __Ptr_user$[ebp], ecx

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003a	b8 04 00 00 00	 mov	 eax, 4
  0003f	6b c8 ff	 imul	 ecx, eax, -1
  00042	8b 55 f8	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  00045	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00048	89 45 ec	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	6b c8 fe	 imul	 ecx, eax, -2
  00053	8b 55 f8	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  00056	81 3c 0a fa fa
	fa fa		 cmp	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH
  0005d	75 02		 jne	 SHORT $LN7@Adjust_man
  0005f	eb 64		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  00061	8b f4		 mov	 esi, esp
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0006d	6a 00		 push	 0
  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  00074	83 c0 09	 add	 eax, 9
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@DLMJMPBP@C?3?2Program?5Files?2Microsoft?5Visu@
  0007d	6a 02		 push	 2
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00085	83 c4 18	 add	 esp, 24			; 00000018H
  00088	3b f4		 cmp	 esi, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	83 f8 01	 cmp	 eax, 1
  00092	75 01		 jne	 SHORT $LN19@Adjust_man
  00094	cc		 int	 3
$LN19@Adjust_man:
  00095	8b f4		 mov	 esi, esp
  00097	6a 00		 push	 0
  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  0009e	83 c0 09	 add	 eax, 9
  000a1	50		 push	 eax
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_1ME@MKDMFCMA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000b7	83 c4 14	 add	 esp, 20			; 00000014H
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	33 c0		 xor	 eax, eax
  000c3	75 9c		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  000c5	33 c0		 xor	 eax, eax
  000c7	75 82		 jne	 SHORT $LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  000c9	c7 45 e0 08 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 8

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000d0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	2b 4d ec	 sub	 ecx, DWORD PTR __Ptr_container$[ebp]
  000d8	89 4d d4	 mov	 DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000db	83 7d d4 08	 cmp	 DWORD PTR __Back_shift$[ebp], 8
  000df	72 08		 jb	 SHORT $LN13@Adjust_man
  000e1	83 7d d4 27	 cmp	 DWORD PTR __Back_shift$[ebp], 39 ; 00000027H
  000e5	77 02		 ja	 SHORT $LN13@Adjust_man
  000e7	eb 64		 jmp	 SHORT $LN8@Adjust_man
$LN13@Adjust_man:
  000e9	8b f4		 mov	 esi, esp
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000f5	6a 00		 push	 0
  000f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  000fc	83 c0 13	 add	 eax, 19			; 00000013H
  000ff	50		 push	 eax
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@DLMJMPBP@C?3?2Program?5Files?2Microsoft?5Visu@
  00105	6a 02		 push	 2
  00107	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0010d	83 c4 18	 add	 esp, 24			; 00000018H
  00110	3b f4		 cmp	 esi, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	83 f8 01	 cmp	 eax, 1
  0011a	75 01		 jne	 SHORT $LN20@Adjust_man
  0011c	cc		 int	 3
$LN20@Adjust_man:
  0011d	8b f4		 mov	 esi, esp
  0011f	6a 00		 push	 0
  00121	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  00126	83 c0 13	 add	 eax, 19			; 00000013H
  00129	50		 push	 eax
  0012a	68 00 00 00 00	 push	 OFFSET ??_C@_1ME@MKDMFCMA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_11LOCGONAA@@
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00139	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0013f	83 c4 14	 add	 esp, 20			; 00000014H
  00142	3b f4		 cmp	 esi, esp
  00144	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00149	33 c0		 xor	 eax, eax
  0014b	75 9c		 jne	 SHORT $LN13@Adjust_man
$LN8@Adjust_man:
  0014d	33 c0		 xor	 eax, eax
  0014f	75 8a		 jne	 SHORT $LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00151	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00154	8b 4d ec	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  00157	89 08		 mov	 DWORD PTR [eax], ecx

; 166  : }

  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5b		 pop	 ebx
  0015c	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00162	3b ec		 cmp	 ebp, esp
  00164	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 78   :         void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __BBC6BDD8_xmemory
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 79   :         return ::operator new(_Bytes);

  00021	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002a	83 c4 04	 add	 esp, 4

; 80   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 552  :     _NODISCARD static constexpr int(max)() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __BCB146BE_limits
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 553  :         return INT_MAX;

  00021	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 554  :     }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -208						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 317  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d ec	 lea	 edi, DWORD PTR [ebp-20]
  0000f	b9 05 00 00 00	 mov	 ecx, 5
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __89F4D116_exception
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 318  :     _THROW(bad_array_new_length{});

  00025	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0002b	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  00030	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00035	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 319  : }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UAE@XZ
  00028	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002b	83 e0 01	 and	 eax, 1
  0002e	74 0e		 je	 SHORT $LN2@scalar
  00030	6a 0c		 push	 12			; 0000000cH
  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00023	50		 push	 eax
  00024	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@ABV01@@Z
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __50B6FA41_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 140  :         : bad_alloc("bad array new length")

  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AAE@QBD@Z ; std::bad_alloc::bad_alloc

; 141  :     {

  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00028	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002b	83 e0 01	 and	 eax, 1
  0002e	74 0e		 je	 SHORT $LN2@scalar
  00030	6a 0c		 push	 12			; 0000000cH
  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00023	50		 push	 eax
  00024	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 130  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __50B6FA41_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 129  :         : exception(_Message, 1)

  0002a	6a 01		 push	 1
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBDH@Z ; std::exception::exception

; 130  :     {

  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 131  :     }

  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00028	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002b	83 e0 01	 and	 eax, 1
  0002e	74 0e		 je	 SHORT $LN2@scalar
  00030	6a 0c		 push	 12			; 0000000cH
  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  00010	b9 04 00 00 00	 mov	 ecx, 4
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __50B6FA41_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00031	74 0e		 je	 SHORT $LN3@what
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00039	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv69[ebp], edx
  0003f	eb 0a		 jmp	 SHORT $LN4@what
$LN3@what:
  00041	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  0004b	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 89   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __50B6FA41_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c0 04	 add	 eax, 4
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0003f	83 c4 04	 add	 esp, 4

; 91   :     }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __50B6FA41_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00033	33 c0		 xor	 eax, eax
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 04	 add	 ecx, 4
  0003b	89 01		 mov	 DWORD PTR [ecx], eax
  0003d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 c0 04	 add	 eax, 4
  00046	50		 push	 eax
  00047	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  0004a	83 c1 04	 add	 ecx, 4
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ___std_exception_copy
  00053	83 c4 08	 add	 esp, 8

; 74   :     }

  00056	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __50B6FA41_vcruntime_exception@h
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00033	33 c0		 xor	 eax, eax
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 04	 add	 ecx, 4
  0003b	89 01		 mov	 DWORD PTR [ecx], eax
  0003d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  00046	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 68   :     }

  00049	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 956  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0000f	b9 09 00 00 00	 mov	 ecx, 9
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __6DFAE8B8_stdio@h
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

  00025	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00028	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002b	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002e	50		 push	 eax
  0002f	6a 00		 push	 0
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00034	51		 push	 ecx
  00035	8b f4		 mov	 esi, esp
  00037	6a 01		 push	 1
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  0003f	83 c4 04	 add	 esp, 4
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 __vfprintf_l
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
  00052	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 961  :         __crt_va_end(_ArgList);

  00055	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 962  :         return _Result;

  0005c	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 963  :     }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 644  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __6DFAE8B8_stdio@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00021	8b f4		 mov	 esi, esp
  00023	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0002e	52		 push	 edx
  0002f	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00038	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003b	51		 push	 ecx
  0003c	8b 10		 mov	 edx, DWORD PTR [eax]
  0003e	52		 push	 edx
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  00045	83 c4 18	 add	 esp, 24			; 00000018H
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 646  :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __A2143F22_corecrt_stdio_config@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00021	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 167  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __EDB62062_vcruntime_new@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 168  :         (void)_Size;
; 169  :         return _Where;

  00021	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 170  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\_УЧЁБА_\Лабораторные работы\КПО (Наркевич)\Лаба 4\Лаба 1\SE_Lab02.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __A3F7A43C_SE_Lab02@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\_УЧЁБА_\Лабораторные работы\КПО (Наркевич)\Лаба 4\Лаба 1\SE_Lab02.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __A3F7A43C_SE_Lab02@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
